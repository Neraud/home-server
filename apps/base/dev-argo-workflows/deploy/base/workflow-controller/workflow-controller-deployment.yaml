apiVersion: apps/v1
kind: Deployment
metadata:
  name: workflow-controller
  labels:
    app.kubernetes.io/name: argo-workflows
    app.kubernetes.io/component: workflow-controller
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-workflows
      app.kubernetes.io/component: workflow-controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-workflows
        app.kubernetes.io/component: workflow-controller
    spec:
      priorityClassName: workflow-controller
      serviceAccountName: argo
      containers:
        - name: workflow-controller
          image: "registry.intra.k8s.test/argo-workflow-controller:v3.4.7"
          securityContext:
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command:
            - workflow-controller
          args: [ ]
          env:
            - name: LEADER_ELECTION_IDENTITY
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          ports:
            - name: metrics
              containerPort: 9090
            - containerPort: 6060
          livenessProbe:
            httpGet:
              port: 6060
              path: /healthz
            # Require three failures to tolerate transient errors.
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 30
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 250m
              memory: 64Mi
          volumeMounts:
          - name: tz-config
            mountPath: /etc/localtime
            readOnly: true
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      securityContext:
        runAsNonRoot: true
      nodeSelector:
        kubernetes.io/os: linux
        capability/general-purpose: 'yes'
