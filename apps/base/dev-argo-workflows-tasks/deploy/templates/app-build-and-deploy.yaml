apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: app-build-and-deploy
  generateName: app-build-and-deploy-
spec:
  serviceAccountName: executor
  #arguments:
  #  parameters:
  #    - name: app_name
  #      value: todo
  #    - name: git_repo
  #      value: todo
  #    - name: git_branch
  #      value: todo
  templates:
    - name: build-and-deploy-from-git
      steps:
      - - name: source-from-git
          template: source-from-git
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            - name: git_repo
              value: "{{workflow.parameters.git_repo}}"
            - name: git_branch
              value: "{{workflow.parameters.git_branch}}"
      - - name: build-images-from-git
          template: build-image
          arguments:
            parameters:
            - name: build_folder
              value: "{{item.folder}}"
            - name: image_name
              value: "{{item.image_name}}"
            - name: image_tag
              value: "{{item.image_tag}}"
            artifacts:
            - name: app_source_base
              from: "{{steps.source-from-git.outputs.artifacts.app_source_base}}"
          withParam: "{{steps.source-from-git.outputs.parameters.app_images}}"
      - - name: deploy-from-git
          template: deploy-from-git
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            artifacts:
            - name: apps_source
              from: "{{steps.source-from-git.outputs.artifacts.apps_source}}"

    - name: build-and-deploy-from-rsync
      steps:
      - - name: source-from-rsync
          template: source-from-rsync
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
      - - name: build-images-from-rsync
          template: build-image
          arguments:
            parameters:
            - name: build_folder
              value: "{{item.folder}}"
            - name: image_name
              value: "{{item.image_name}}"
            - name: image_tag
              value: "{{item.image_tag}}"
            artifacts:
            - name: app_source_base
              from: "{{steps.source-from-rsync.outputs.artifacts.app_source_base}}"
          withParam: "{{steps.source-from-rsync.outputs.parameters.app_images}}"
      - - name: deploy-from-rsync
          template: deploy-from-rsync
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            artifacts:
            - name: apps_source
              from: "{{steps.source-from-rsync.outputs.artifacts.apps_source}}"

    - name: source-from-git
      inputs:
        parameters:
        - name: app_name
        - name: git_repo
        - name: git_branch
        artifacts:
        - name: argo-source
          path: /source
          git:
            repo: "{{inputs.parameters.git_repo}}"
            branch: "{{inputs.parameters.git_branch}}"
            depth: 1
            disableSubmodules: false
            singleBranch: true
            usernameSecret:
              name: git-credentials
              key: gitea_username
            passwordSecret:
              name: git-credentials
              key: gitea_password
      script:
        image: registry.lan/template-source-fetcher:3.11.3-alpine3.17-1
        command: [bash]
        source: |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          echo "Copy base folder /source/apps/base/{{inputs.parameters.app_name}}"
          cp -Rv /source/apps/base/{{inputs.parameters.app_name}} /work/base
          echo "----------------------------------------------------------------------------------------------------"
          echo "Copy overlay folder /source/apps/vagrant/{{inputs.parameters.app_name}}"
          cp -Rv /source/apps/vagrant/{{inputs.parameters.app_name}} /work/overlay
          echo "----------------------------------------------------------------------------------------------------"
          python /opt/list_images.py -i /source/apps/base/{{inputs.parameters.app_name}}/build -o /work/images.json
        volumeMounts:
          - name: work
            mountPath: /work
      volumes:
        - name: work
          emptyDir: {}
      outputs:
        artifacts:
        - name: app_source_base
          path: /source/apps/base/{{inputs.parameters.app_name}}
        - name: apps_source
          path: /source/apps
        #- name: app_source_overlay
        #  path: /source/apps/vagrant/{{inputs.parameters.app_name}}
        #- name: app_images
        #  path: /work/images.json
        #  archive:
        #    none: {}
        parameters:
        - name: app_images
          valueFrom:
            path: /work/images.json

    - name: source-from-rsync
      inputs:
        parameters:
        - name: app_name
      script:
        image: registry.lan/template-source-fetcher:3.11.3-alpine3.17-1
        command: [bash]
        source: |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          /opt/rsync_fetch.sh /rsync-source/ssh_config /rsync-source/id_rsa source:/opt/provision/apps /work/ ""
          echo "----------------------------------------------------------------------------------------------------"
          python /opt/list_images.py -i /work/apps/base/{{inputs.parameters.app_name}}/build -o /work/images.json
          echo "----------------------------------------------------------------------------------------------------"
        volumeMounts:
        - name: work
          mountPath: /work
        - name: rsync-source
          mountPath: /rsync-source
      volumes:
      - name: work
        emptyDir: {}
      - name: rsync-source
        secret:
          secretName: rsync-source
      outputs:
        artifacts:
        - name: app_source_base
          path: /work/apps/base/{{inputs.parameters.app_name}}
        - name: apps_source
          path: /work/apps
        #- name: app_source_overlay
        #  path: /work/apps/vagrant/{{inputs.parameters.app_name}}
        #- name: app_images
        #  path: /tmp/{{inputs.parameters.app_name}}_images.json
        #  archive:
        #    none: {}
        parameters:
        - name: app_images
          valueFrom:
            path: /work/images.json

    - name: build-image
      inputs:
        parameters:
        - name: build_folder
        - name: image_name
        - name: image_tag
        artifacts:
        - name: app_source_base
          path: /source/base
      initContainers:
      - name: create-volume
        image: registry.lan/kaniko-image-builder:v1.9.2-debug
        command:
        - "sh"
        - "-c"
        - |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          echo "Copy /kaniko to temp volume"
          cp -av /kaniko /tmp/
          echo "----------------------------------------------------------------------------------------------------"
          echo "Inject cluster-ca in kaniko certs"
          cat /etc/ssl/cluster/ca.cert >> /tmp/kaniko/ssl/certs/ca-certificates.crt
        volumeMounts:
        - name: cluster-ca
          mountPath: /etc/ssl/cluster/ca.cert
          subPath: ca.crt
        - name: tmp
          mountPath: /tmp
      container:
        image: registry.lan/kaniko-image-builder:v1.9.2-debug
        command: ["/kaniko/executor"]
        args:
          - --cache
          - --cache-copy-layers
          - --cache-repo=registry.lan/{{inputs.parameters.image_name}}-cache
          - --reproducible
          - --context=/source/base/build/{{inputs.parameters.build_folder}}
          - --destination=registry.lan/{{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}
          - --verbosity=info
        volumeMounts:
        - name: docker-config
          mountPath: /kaniko/.docker/config.json
          subPath: .dockerconfigjson
        - name: tmp
          mountPath: /kaniko
          subPath: kaniko
        resources:
          requests:
            cpu: 0.5
            memory: 1024Mi
          limits:
            cpu: 1
            memory: 1024Mi
        securityContext:
          capabilities:
            add:
              - CAP_SETGID
              - CAP_SETUID
          runAsNonRoot: false
          runAsUser: 0
      volumes:
      - name: cluster-ca
        secret:
          secretName: cluster-ca
      - name: docker-config
        secret:
          secretName: docker-config
      - name: tmp
        emptyDir: {}

    - name: deploy-from-git
      inputs:
        parameters:
        - name: app_name
      script:
        image: registry.lan/template-source-fetcher:3.11.3-alpine3.17-1
        command: [sh]
        source: |
          echo "TODO"

    - name: deploy-from-rsync
      inputs:
        artifacts:
        - name: apps_source
          path: /source/apps
        parameters:
        - name: app_name
      script:
        image: registry.lan/template-source-fetcher:3.11.3-alpine3.17-1
        command: [sh]
        source: |
          echo "TODO"
          echo "----------------------------------------------------------------------------------------------------"
          find /source
          echo "----------------------------------------------------------------------------------------------------"
