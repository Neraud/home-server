apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jellyfin
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: jellyfin
      app.kubernetes.io/component: jellyfin
  template:
    metadata:
      labels:
        app.kubernetes.io/name: jellyfin
        app.kubernetes.io/component: jellyfin
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000 # jellyfin
        fsGroup: 1000
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: inject-conf
        image: "registry.lan/jellyfin-conf-injection:3.11.5-alpine3.18"
        imagePullPolicy: IfNotPresent
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: jellyfin-inject-config
          mountPath: /config-source
        - name: jellyfin-data
          mountPath: /config-target
          subPath: config
      - name: inject-certificate
        image: "registry.lan/jellyfin-conf-injection:3.11.5-alpine3.18"
        imagePullPolicy: IfNotPresent
        command:
          - "sh"
          - "-c"
          - |
            cp /etc/ssl/certs/ca-certificates.crt /tmp-cert
            cat /etc/ssl/cluster/ca.crt >> /tmp-cert/ca-certificates.crt
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
        - name: tmp-cert-volume
          mountPath: /tmp-cert
      containers:
      - name: jellyfin
        image: "registry.lan/jellyfin:10.8.11-amd64-custom"
        ports:
        - containerPort: 8096
          name: jellyfin
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: jellyfin
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: "1"
            memory: 512Mi
            # To use a gpu limit
            #gpu.intel.com/i915: 1
        volumeMounts:
        - name: cluster-config
          mountPath: /etc/localtime
          subPath: localtime
          readOnly: true
        - name: jellyfin-data
          mountPath: /config
          subPath: config
        - name: tmp-cache-volume
          mountPath: /cache
        - name: tmp-transcodes-volume
          mountPath: /config/transcodes
        - name: jellyfin-multimedia
          mountPath: /media
        - name: tmp-cert-volume
          mountPath: /etc/ssl/certs/ca-certificates.crt
          subPath: ca-certificates.crt
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: cluster-config
        configMap:
          name: cluster-config
      - name: jellyfin-data
        persistentVolumeClaim:
          claimName: jellyfin-data
      - name: jellyfin-inject-config
        secret:
          secretName: jellyfin-inject-config
      - name: jellyfin-multimedia
        persistentVolumeClaim:
          claimName: nfs-multimedia
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: tmp-volume
        emptyDir: {}
      - name: tmp-cert-volume
        emptyDir: {}
      - name: tmp-cache-volume
        emptyDir: {}
      - name: tmp-transcodes-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
