apiVersion: apps/v1
kind: Deployment
metadata:
  name: miniflux
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: miniflux
      app.kubernetes.io/component: web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: miniflux
        app.kubernetes.io/component: web
    spec:
      initContainers:
      - name: wait-for-requirements
        image: "registry.lan/miniflux-busybox:1.36.0"
        imagePullPolicy: IfNotPresent
        command: 
        - "sh"
        - "-c"
        - |
          echo "Waiting for PostgreSQL DB"
          timeout 120s sh -c "while ! nc -z -w 0 pgsql 5432 ; do echo 'Still waiting ...' ; sleep 5 ; done"
          ret=$?
          echo "return : $ret"
          if [ $ret -eq 0 ] ; then
            echo "PostgreSQL DB Server has started"
          else
            echo "FAILED : PostgreSQL DB Server isn't available"
            exit 1
          fi
      containers:
      - name: miniflux
        image: "registry.lan/miniflux:2.0.43-distroless"
        imagePullPolicy: IfNotPresent
        envFrom:
        - configMapRef:
            name: miniflux-env
        - secretRef:
            name: miniflux-env
        ports:
        - containerPort: 8080
          name: http
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534 # nobody
          readOnlyRootFilesystem: true
        readinessProbe:
          exec:
            command:
            - /usr/bin/miniflux
            - -healthcheck
            - auto
        resources:
          requests:
            cpu: 25m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 128Mi
        volumeMounts:
        - name: cluster-config
          mountPath: /etc/localtime
          subPath: localtime
          readOnly: true
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
      volumes:
      - name: cluster-config
        configMap:
          name: cluster-config
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
