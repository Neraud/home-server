apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nodered
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: nodered
      app.kubernetes.io/component: nodered
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nodered
        app.kubernetes.io/component: nodered
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001 # node-red
        fsGroup: 1001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      initContainers:
      - name: create-folders
        image: "registry.lan/nodered:3.1.0-18-minimal-custom"
        imagePullPolicy: IfNotPresent
        command:
          - "sh"
          - "-c"
          - |
            if [ -d /nodered/data ] ; then
              echo "NodeRed data folder already exists, ignoring bootstrap"
            else
              echo "NodeRed data folder doesn't exist, injecting bootstrap"
              mkdir -p /nodered/data
              cp -RL /nodered-bootstrap/* /nodered/data/
            fi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: nodered-data
          mountPath: /nodered
        - name: nodered-bootstrap
          mountPath: /nodered-bootstrap
      containers:
      - name: nodered
        image: "registry.lan/nodered:3.1.0-18-minimal-custom"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 1880
          name: nodered
        resources:
          requests:
            cpu: 25m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: nodered
          initialDelaySeconds: 3
          periodSeconds: 5
        volumeMounts:
        - name: cluster-config
          mountPath: /etc/localtime
          subPath: localtime
          readOnly: true
        - name: nodered-data
          mountPath: /data
          subPath: data
        - name: nodered-config
          mountPath: /data/settings.js
          subPath: settings.js
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.cert
          subPath: ca.crt
      volumes:
      - name: cluster-config
        configMap:
          name: cluster-config
      - name: nodered-data
        persistentVolumeClaim:
          claimName: nodered-data
      - name: nodered-config
        secret:
          secretName: nodered-config
      - name: nodered-bootstrap
        configMap:
          name: nodered-bootstrap
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
