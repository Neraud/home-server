apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nodered
  namespace: default
  labels:
    app: nodered
    app-component: nodered
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      app: nodered
      app-component: nodered
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nodered
        app-component: nodered
    spec:
      containers:
      - image: {{ kubernetes_registry_url }}/nodered
        name: nodered
        ports:
        - containerPort: 1880
          name: nodered
        resources:
          requests:
            cpu: "{{ nodered_requests_cpu | default("250m") }}"
            memory: "{{ nodered_requests_memory | default("256Mi") }}"
          limits:
            cpu: "{{ nodered_limits_cpu | default("500m") }}"
            memory: "{{ nodered_limits_memory | default("256Mi") }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
        - name: nodered-pv-claim
          mountPath: /data
          subPath: data
        - name: nodered-config
          mountPath: /data/settings.js
          subPath: settings.js
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.cert
          subPath: ca.crt
      securityContext:
        fsGroup: 1001 # node-red group inside the container
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: nodered-config
        configMap:
          name: nodered
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: nodered-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: 128M
      selector:
        matchLabels:
          app: nodered
          app-component: nodered
