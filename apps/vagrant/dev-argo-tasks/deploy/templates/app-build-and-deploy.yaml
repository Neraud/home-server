apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: app-build-and-deploy
  generateName: app-build-and-deploy-
spec:
  serviceAccountName: executor
  #arguments:
  #  parameters:
  #    - name: app_name
  #      value: todo
  #    - name: git_repo
  #      value: todo
  #    - name: git_branch
  #      value: todo
  templates:
    - name: build-and-deploy-from-git
      steps:
      - - name: base-source-from-git
          template: base-source-from-git
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            - name: base_git_repo
              value: "{{workflow.parameters.base_git_repo}}"
            - name: base_git_branch
              value: "{{workflow.parameters.base_git_branch}}"
      - - name: build-images-from-git
          template: build-image
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            - name: build_folder
              value: "{{item.folder}}"
            - name: image_name
              value: "{{item.image_name}}"
            - name: image_tag
              value: "{{item.image_tag}}"
            artifacts:
            - name: apps_source_base
              from: "{{steps.base-source-from-git.outputs.artifacts.apps_source_base}}"
          withParam: "{{steps.base-source-from-git.outputs.parameters.app_images}}"
      - - name: deploy-from-git
          template: deploy-from-git
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"

    - name: build-and-deploy-from-rsync
      steps:
      - - name: source-from-rsync
          template: source-from-rsync
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
      - - name: build-images-from-rsync
          template: build-image
          arguments:
            parameters:
            - name: app_name
              value: "{{workflow.parameters.app_name}}"
            - name: build_folder
              value: "{{item.folder}}"
            - name: image_name
              value: "{{item.image_name}}"
            - name: image_tag
              value: "{{item.image_tag}}"
            artifacts:
            - name: apps_source_base
              from: "{{steps.source-from-rsync.outputs.artifacts.apps_source_base}}"
          withParam: "{{steps.source-from-rsync.outputs.parameters.app_images}}"
      #- - name: deploy-from-rsync
      #    template: deploy-from-rsync
      #    arguments:
      #      parameters:
      #      - name: app_name
      #        value: "{{workflow.parameters.app_name}}"
      #      artifacts:
      #      - name: apps_source_base
      #        from: "{{steps.source-from-rsync.outputs.artifacts.apps_source_base}}"
      #      - name: apps_source_overlay
      #        from: "{{steps.source-from-rsync.outputs.artifacts.apps_source_overlay}}"

    - name: base-source-from-git
      inputs:
        parameters:
        - name: app_name
        - name: base_git_repo
        - name: base_git_branch
        artifacts:
        - name: argo-source
          path: /source
          git:
            repo: "{{inputs.parameters.base_git_repo}}"
            branch: "{{inputs.parameters.base_git_branch}}"
            depth: 1
            disableSubmodules: false
            singleBranch: true
            usernameSecret:
              name: git-credentials
              key: gitea_username
            passwordSecret:
              name: git-credentials
              key: gitea_password
      script:
        image: registry.lan/template-source-fetcher:v2-3.12.2-alpine3.19
        command: [bash]
        source: |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          echo "Copy base folder /source/apps/base/{{inputs.parameters.app_name}}"
          cp -Rv /source/apps/base/{{inputs.parameters.app_name}} /work/base
          echo "----------------------------------------------------------------------------------------------------"
          python /opt/list_images.py -i /source/apps/base/{{inputs.parameters.app_name}}/build -o /work/images.json
        volumeMounts:
          - name: work
            mountPath: /work
      volumes:
        - name: work
          emptyDir: {}
      outputs:
        artifacts:
        - name: apps_source_base
          path: /source/apps/base
        parameters:
        - name: app_images
          valueFrom:
            path: /work/images.json

    - name: source-from-rsync
      inputs:
        parameters:
        - name: app_name
      script:
        image: registry.lan/template-source-fetcher:v2-3.12.2-alpine3.19
        command: [bash]
        source: |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          /opt/rsync_fetch.sh /rsync-source/ssh_config /rsync-source/id_rsa source:/opt/provision/apps /work/ ""
          echo "----------------------------------------------------------------------------------------------------"
          python /opt/list_images.py -i /work/apps/base/{{inputs.parameters.app_name}}/build -o /work/images.json
          echo "----------------------------------------------------------------------------------------------------"
        volumeMounts:
        - name: work
          mountPath: /work
        - name: rsync-source
          mountPath: /rsync-source
      volumes:
      - name: work
        emptyDir: {}
      - name: rsync-source
        secret:
          secretName: rsync-source
      outputs:
        artifacts:
        - name: apps_source_base
          path: /work/apps/base
        - name: apps_source_overlay
          path: /work/apps/vagrant
        parameters:
        - name: app_images
          valueFrom:
            path: /work/images.json

    - name: build-image
      inputs:
        parameters:
        - name: app_name
        - name: build_folder
        - name: image_name
        - name: image_tag
        artifacts:
        - name: apps_source_base
          path: /source/apps/base
      script:
        image: registry.lan/buildah:v1.34.0
        command: [bash]
        source: |
          set -euo pipefail
          echo "----------------------------------------------------------------------------------------------------"
          echo "Building {{inputs.parameters.build_folder}}"
          buildah build --format=docker -f Dockerfile -t registry.lan/{{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}} /source/apps/base/{{inputs.parameters.app_name}}/build/{{inputs.parameters.build_folder}}
          echo "----------------------------------------------------------------------------------------------------"
          echo "Pushing registry.lan/{{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}"
          buildah push --cert-dir /etc/ssl/cluster/ --retry 5 registry.lan/{{inputs.parameters.image_name}}:{{inputs.parameters.image_tag}}
          echo "----------------------------------------------------------------------------------------------------"
        volumeMounts:
        - name: cluster-ca
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
        - name: docker-config
          mountPath: /root/.docker/config.json
          subPath: .dockerconfigjson
        - name: var-lib-containers
          mountPath: /var/lib/containers
        resources:
          requests:
            cpu: 250m
            memory: 1024Mi
          limits:
            cpu: 1
            memory: 1024Mi
        securityContext:
          # Required for Buildah to work
          privileged: true
          allowPrivilegeEscalation: true
          runAsUser: 0
          runAsNonRoot: false
          readOnlyRootFilesystem: false
      volumes:
      - name: cluster-ca
        secret:
          secretName: cluster-ca
      - name: docker-config
        secret:
          secretName: docker-config
      - name: var-lib-containers
        hostPath:
          path: /var/lib/containers

    - name: deploy-from-git
      inputs:
        parameters:
        - name: app_name
      script:
        image: registry.lan/argocd:v2.10.7-ksops
        command: [bash]
        env:
        - name: ARGOCD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: "argocd-ci-token"
              key: ARGOCD_AUTH_TOKEN
        - name: ARGOCD_SERVER
          value: "argocd-server.dev-argo-cd.svc.cluster.local"
        - name: ARGOCD_OPTS
          value: "--server-crt /etc/ssl/argocd/server.crt"
        source: |
          #!/bin/bash
          set -euo pipefail

          if [[ -z $ARGOCD_AUTH_TOKEN ]] ; then
            echo "ARGOCD_AUTH_TOKEN must be specified"
            exit 1
          fi

          echo "----------------------------------------------------------------------------------------------------"
          echo "Running as ArgoCD User:"
          argocd account get-user-info

          echo "----------------------------------------------------------------------------------------------------"
          echo "ArgoCD app:"
          argocd app get {{inputs.parameters.app_name}}
                                        
          echo "----------------------------------------------------------------------------------------------------"
          echo "ArgoCD app sync:"
          argocd app sync {{inputs.parameters.app_name}} --prune --preview-changes --assumeYes
          
          echo "----------------------------------------------------------------------------------------------------"
          echo "Waiting for app to become healthy"
          argocd app wait {{inputs.parameters.app_name}} --health
        volumeMounts:
        - name: argocd-server-cert
          mountPath: /etc/ssl/argocd/server.crt
          subPath: tls.crt
        - name: tmp-volume
          mountPath: /tmp
          subPath: tmp
        - name: tmp-volume
          mountPath: /.config
          subPath: config
      volumes:
      - name: argocd-server-cert
        secret:
          secretName: argocd-server-cert
      - name: tmp-volume
        emptyDir: {}

    - name: deploy-from-rsync
      inputs:
        parameters:
        - name: app_name
        artifacts:
        - name: apps_source_base
          path: /source/apps/base
        - name: apps_source_overlay
          path: /source/apps/overlay
      script:
        image: registry.lan/argocd:v2.10.7-ksops
        command: [bash]
        env:
        - name: ARGOCD_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: "argocd-ci-token"
              key: ARGOCD_AUTH_TOKEN
        - name: ARGOCD_SERVER
          value: "argocd-server.dev-argo-cd.svc.cluster.local"
        - name: ARGOCD_OPTS
          value: "--server-crt /etc/ssl/argocd/server.crt"
        - name: SOPS_AGE_KEY_FILE
          value: "/home/argocd/.sops/key.txt"
        source: |
          #!/bin/bash
          set -euo pipefail

          if [[ -z $ARGOCD_AUTH_TOKEN ]] ; then
            echo "ARGOCD_AUTH_TOKEN must be specified"
            exit 1
          fi

          #echo "----------------------------------------------------------------------------------------------------"
          # TODO : use server-side argocd diff/sync
          # diff already works with argocd:v2.7.1, but sync isn't supported, so we keep a manual generation
          # see https://github.com/argoproj/argo-cd/issues/10936
          echo "Generate manifests with Kustomize"
          mkdir /tmp/manifests
          kustomize build --enable-alpha-plugins --enable-exec /source/apps/overlay/{{inputs.parameters.app_name}}/deploy > /tmp/manifests/manifest.yaml
          echo "----------------------------------------------------------------------------------------------------"

          echo "----------------------------------------------------------------------------------------------------"
          echo "Running as ArgoCD User:"
          argocd account get-user-info

          echo "----------------------------------------------------------------------------------------------------"
          echo "ArgoCD app:"
          argocd app get {{inputs.parameters.app_name}}
                                        
          echo "----------------------------------------------------------------------------------------------------"
          echo "ArgoCD app sync:"
          argocd app sync {{inputs.parameters.app_name}} --local /tmp/manifests/ --prune --preview-changes --assumeYes
          
          echo "----------------------------------------------------------------------------------------------------"
          echo "Waiting for app to become healthy"
          argocd app wait {{inputs.parameters.app_name}} --health
        volumeMounts:
        - name: argocd-server-cert
          mountPath: /etc/ssl/argocd/server.crt
          subPath: tls.crt
        - name: tmp-volume
          mountPath: /tmp
          subPath: tmp
        - name: tmp-volume
          mountPath: /.config
          subPath: config
        - name: sops-key
          readOnly: true
          mountPath: "/home/argocd/.sops/key.txt"
          subPath: "key.txt"
      volumes:
      - name: argocd-server-cert
        secret:
          secretName: argocd-server-cert
      - name: sops-key
        secret:
          secretName: sops-key
      - name: tmp-volume
        emptyDir: {}
