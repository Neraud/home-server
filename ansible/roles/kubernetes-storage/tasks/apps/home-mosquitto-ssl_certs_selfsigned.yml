---

- name: Ensures the SSL Certs key folders exist
  file:
    path: "{{ item.cert.cert_key_path | dirname }}"
    state: directory
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"

- name: Ensures the SSL Certs folders exist
  file:
    path: "{{ item.cert.cert_path | dirname }}"
    state: directory
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"

- name: Generate self-signed SSL CA
  command: openssl req -new -nodes -x509 -days 3650 -keyout {{ item.cert.ca_key_path }} -out {{ item.cert.ca_path }} -subj "{{ item.cert.subject }}" -extensions v3_ca
  args:
    creates: "{{ item.cert.ca_path }}"
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"

- name: Generate a server key without encryption
  command: openssl genrsa -out {{ item.cert.cert_key_path }} 2048
  args:
    creates: "{{ item.cert.cert_key_path }}"
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"

- name: Generate a CSR
  command: openssl req -out {{ item.cert.cert_path }}.csr -key {{ item.cert.cert_key_path }} -new -subj "{{ item.cert.subject }}"
  args:
    creates: "{{ item.cert.cert_path }}.csr"
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"

- name: Sign the CSR with our CA
  command: openssl x509 -req -in {{ item.cert.cert_path }}.csr -CA {{ item.cert.ca_path }} -CAkey {{ item.cert.ca_key_path }} -CAcreateserial -out {{ item.cert.cert_path }} -days 3650 -extensions v3_ca
  args:
    creates: "{{ item.cert.cert_path }}"
  with_items: "{{ mosquitto_listeners }}"
  when: item.cert is defined and item.cert.mode == "selfsigned"
