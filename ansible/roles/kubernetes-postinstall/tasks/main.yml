---
- name: Create kube configuration folder for standard user
  file:
    path: "{{ kubernetes_user.home }}/.kube"
    state: directory
    owner: "{{ kubernetes_user.name }}"

- name: Configure kube for standard user
  copy:
    dest: "{{ kubernetes_user.home }}/.kube/config"
    src: /etc/kubernetes/admin.conf
    remote_src: yes
    owner: "{{ kubernetes_user.name }}"
    backup: yes

- name: Enable k8s autocompletion for standard user
  copy:
    dest: "{{ kubernetes_user.home }}/.bashrc.d/k8s_autocomplete.bashrc"
    content: |
      # kubectl completion
      source <(kubectl completion bash)
    owner: "{{ kubernetes_user.name }}"

- name: Get current node tags
  command: kubectl get nodes {{ ansible_hostname | lower }} -o yaml
  changed_when: false
  register: current_node_tags_results
  become: yes
  become_user: "{{ kubernetes_user.name }}"

- name: Extract current node tags
  set_fact:
    current_node_tags: "{{ (current_node_tags_results.stdout | from_yaml).metadata.labels }}"

- name: Tag node
  command: kubectl label nodes {{ ansible_hostname | lower }} --overwrite=true {{ item.name }}={{ item.value }}
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  with_items: "{{ kubernetes_node_labels | default([]) }}"
  when: (item.name not in current_node_tags) or (item.value != current_node_tags[item.name])

- name: Untag node
  command: kubectl label nodes {{ ansible_hostname | lower }} {{ item }}-
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  with_items: "{{ current_node_tags }}"
  when:
    - "'kubernetes.io' not in item"
    - item not in (kubernetes_node_labels | default([]) | map(attribute='name'))
