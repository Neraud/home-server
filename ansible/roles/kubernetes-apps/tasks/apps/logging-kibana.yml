---

- name: Deploy Kibana
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
  with_fileglob:
    - "{{ kubernetes_app_root_path }}/logging/kibana/deploy/*.yaml*"
  become: yes
  become_user: "{{ kubernetes_user.name }}"

- name: Create Kibana saved objects exporter dir
  file:
    path: "{{ logging_kibana_export_saved_script_path | dirname }}"
    state: directory
    owner: "{{ standard_user.name }}"
    group: "{{ standard_user.name }}"

- name: Generate Kibana saved objects exporter
  template:
    src: "{{ kubernetes_app_root_path }}/logging/kibana/kibana_save_objects.py.j2"
    dest: "{{ logging_kibana_export_saved_script_path }}"
    owner: "{{ standard_user.name }}"
    group: "{{ standard_user.name }}"
    mode: 0755

- name: Wait for Kibana to be available
  uri:
    url: "{{ logging_kibana_internal_url }}/app/kibana"
    method: GET
    return_content: no
    validate_certs: "{{ logging_kibana_valid_certs }}"
  register: kibana_available
  until:
  - kibana_available.status == 200
  retries: 18
  delay: 10

- name: List Kibana saved objects
  set_fact:
    kibana_config_files: "{{ kibana_config_files | default([]) + [ item ] }}"
  with_fileglob:
    - "{{ kubernetes_app_root_path }}/logging/kibana/config/*.json*"

- name: Read Kibana saved objects
  set_fact:
    kibana_config_contents: "{{ kibana_config_contents | default([]) + [ (lookup(item | regex_search('.j2$') | ternary('template','file'), item) | from_json) ] }}"
  with_items: "{{ kibana_config_files }}"

- name: Check if objects already exist
  uri:
    url: "{{ logging_kibana_internal_url }}/api/saved_objects/{{ item.1.type }}/{{ item.1.id }}"
    method: GET
    return_content: yes
    status_code:
      - 200
      - 404
    validate_certs: "{{ logging_kibana_valid_certs }}"
  register: existing_kibana_saved_objects
  with_together: 
    - "{{ kibana_config_files }}"
    - "{{ kibana_config_contents }}"
  loop_control:
    label: "{{ item.0 }} -> {{ item.1.id }}"

- name: Create missing objects
  uri:
    url: "{{ logging_kibana_internal_url }}/api/saved_objects/{{ item.1.type }}/{{ item.1.id }}"
    method: POST
    body: 
      attributes: "{{ item.1.attributes }}"
    body_format: json
    headers:
      kbn-xsrf: kbn-xsrf
    validate_certs: "{{ logging_kibana_valid_certs }}"
  with_together: 
    - "{{ kibana_config_files }}"
    - "{{ kibana_config_contents }}"
    - "{{ existing_kibana_saved_objects.results }}"
  loop_control:
    label: "{{ item.0 }} -> {{ item.1.id }}"
  changed_when: True
  when: item.2.status == 404

- name: Updating changed objects
  uri:
    url: "{{ logging_kibana_internal_url }}/api/saved_objects/{{ item.1.type }}/{{ item.1.id }}"
    method: PUT
    body: 
      attributes: "{{ item.1.attributes }}"
    body_format: json
    headers:
      kbn-xsrf: kbn-xsrf
    validate_certs: "{{ logging_kibana_valid_certs }}"
  with_together: 
    - "{{ kibana_config_files }}"
    - "{{ kibana_config_contents }}"
    - "{{ existing_kibana_saved_objects.results }}"
  loop_control:
    label: "{{ item.0 }} -> {{ item.1.id }}"
  changed_when: True
  when: 
    - item.2.status == 200
    - item.2.json.attributes != item.1.attributes
