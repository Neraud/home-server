apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: airsonic
  namespace: {{ airsonic.namespace }}
  labels:
    {{ airsonic.labels_def | to_nice_yaml() | indent(4) }}
    {{ airsonic.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ airsonic.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ airsonic.labels_def | to_nice_yaml() | indent(8) }}
        {{ airsonic.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      initContainers:
      - name: create-folders
        image: "{{ busybox.container.image }}"
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /airsonic/data
            chown -R 1000:1000 /airsonic/data
        volumeMounts:
        - name: airsonic-data-pv-claim
          mountPath: /airsonic
      - name: inject-properties
        image: "{{ busybox.container.image }}"
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
        command: [ "sh", "/config/inject_properties.sh" ]
        volumeMounts:
        - name: airsonic-data-pv-claim
          mountPath: /airsonic/data
          subPath: data
        - name: airsonic-config
          mountPath: /config
      - name: inject-certificates
        image: "{{ airsonic.container.image }}"
        command:
          - "sh"
          - "-c"
          - |
            cp /etc/ssl/certs/java/cacerts /etc/ssl/certs/java_target/cacerts
            /usr/bin/keytool \
              -importcert -noprompt \
              -keystore /etc/ssl/certs/java_target/cacerts -storepass changeit \
              -alias cluster -file /etc/ssl/cluster/ca.crt
        volumeMounts:
        - name: keystore-volume
          mountPath: /etc/ssl/certs/java_target
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
      containers:
      - name: airsonic
        image: "{{ airsonic.container.image }}"
        imagePullPolicy: Always        
        ports:
        - containerPort: 4040
          name: airsonic
        env:
        - name: AIRSONIC_PORT
          value: "4040"
        - name: CONTEXT_PATH
          value: "{{ airsonic.context_path | default ('/') }}"
{% if airsonic.extra_java_opts | default([]) | length > 0 %}
        - name: JAVA_OPTS
          value: "{{ airsonic.extra_java_opts | join(' ') }}"
{% endif %}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: {{ airsonic.context_path }}/rest/ping
            port: airsonic
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ airsonic.container.requests_cpu }}"
            memory: "{{ airsonic.container.requests_memory }}"
          limits:
            cpu: "{{ airsonic.container.limits_cpu }}"
            memory: "{{ airsonic.container.limits_memory }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: keystore-volume
          mountPath: /etc/ssl/certs/java
        - name: airsonic-data-pv-claim
          mountPath: /airsonic/data
          subPath: data
        - name: airsonic-playlists-pv-claim
          mountPath: /airsonic/playlists
        - name: airsonic-multimedia
          mountPath: /mnt/multimedia
        # airsonic-config is not used by the container directly
        # But mounting it enables the use of the reloader
        - name: airsonic-config
          mountPath: /config
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: airsonic-config
        configMap:
          name: airsonic-config
          defaultMode: 0555
      - name: airsonic-multimedia
        persistentVolumeClaim:
          claimName: nfs-multimedia
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: keystore-volume
        emptyDir: {}
      - name: tmp-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: airsonic-data-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: 256M
      selector:
        matchLabels:
          {{ airsonic.labels_def | to_nice_yaml() | indent(10) }}
          storage: data
  - metadata:
      name: airsonic-playlists-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: 256M
      selector:
        matchLabels:
          {{ airsonic.labels_def | to_nice_yaml() | indent(10) }}
          storage: playlists
