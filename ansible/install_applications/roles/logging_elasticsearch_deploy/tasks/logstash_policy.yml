---
- name: Load {{ elasticsearch.logstash_policy.name }} policy
  ansible.builtin.set_fact:
    logstash_policy_content: "{{ lookup('template', 'logstash_policy.json.j2') }}"

- name: Get current logstash {{ elasticsearch.logstash_policy.name }} policy
  ansible.builtin.uri:
    url: "https://{{ kubernetes_nginx_ingress_lb_ip }}:{{ kubernetes_ingress_https_port }}{{ elasticsearch.context_root }}/_plugins/_ism/policies/{{ elasticsearch.logstash_policy.name }}"
    method: GET
    headers:
      Host: "elasticsearch.log.intra.{{ web_base_domain }}"
    validate_certs: no
    status_code: [200, 404]
    force_basic_auth: yes
    user: "{{ elasticsearch.admin_user.user }}"
    password: "{{ elasticsearch.admin_user.password }}"
  register: current_ism_policy

- name: Create logstash {{ elasticsearch.logstash_policy.name }} policy
  ansible.builtin.uri:
    url: "https://{{ kubernetes_nginx_ingress_lb_ip }}:{{ kubernetes_ingress_https_port }}{{ elasticsearch.context_root }}/_plugins/_ism/policies/{{ elasticsearch.logstash_policy.name }}"
    method: PUT
    headers:
      Host: "elasticsearch.log.intra.{{ web_base_domain }}"
    body: "{{ logstash_policy_content }}"
    body_format: json
    validate_certs: no
    status_code: [201]
    force_basic_auth: yes
    user: "{{ elasticsearch.admin_user.user }}"
    password: "{{ elasticsearch.admin_user.password }}"
  register: set_logstash_policy
  changed_when: True
  when: current_ism_policy.status == 404

- name: Update {{ elasticsearch.logstash_policy.name }} policy if necessary
  block:
    - name: Filter fields from current {{ elasticsearch.logstash_policy.name }} policy
      ansible.builtin.set_fact:
        current_ism_policy_filtered: "{{ current_ism_policy_filtered | default({}) | combine({item.key: item.value}) }}"
      when: item.key not in ['error_notification', 'last_updated_time', 'ism_template']
      loop: "{{ current_ism_policy.json.policy | default({}) | dict2items }}"

    - name: Update {{ elasticsearch.logstash_policy.name }} policy
      ansible.builtin.uri:
        url: "https://{{ kubernetes_nginx_ingress_lb_ip }}:{{ kubernetes_ingress_https_port }}{{ elasticsearch.context_root }}/_plugins/_ism/policies/{{ elasticsearch.logstash_policy.name }}?if_seq_no={{ current_ism_policy.json._seq_no }}&if_primary_term={{ current_ism_policy.json._primary_term }}"
        method: PUT
        headers:
          Host: "elasticsearch.log.intra.{{ web_base_domain }}"
        body: "{{ logstash_policy_content }}"
        body_format: json
        validate_certs: no
        status_code: [200]
        force_basic_auth: yes
        user: "{{ elasticsearch.admin_user.user }}"
        password: "{{ elasticsearch.admin_user.password }}"
      register: set_logstash_policy
      changed_when: True
      when: current_ism_policy_filtered != logstash_policy_content.policy
  when: current_ism_policy.status != 404
