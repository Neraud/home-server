---
# This set of tasks is meant to be imported in each [app].deploy role
# It ensures the target docker image is pushed in the private repository.

# For custom images, it builds the image, and pushes it to the private repo
# For standard images, it pulls the image, and pushes it to the private repo

# Usage :
#- name: Ensure app_name image is up-to-date in the private registry
#  ansible.builtin.import_tasks: ../../app_base_deploy/tasks/docker-image-private-registry.yml
#  vars:
#    base_image:
#      repo: repo
#      name: image-name
#      tag: a.b.c
#    private_image: 127.0.0.1:30500/image-name:a.b.c-custom
#    build: yes|no
#    build_path: "/path"
#    build_args: {}

- name: Generate public_image full name
  ansible.builtin.set_fact:
    public_image: "{% if base_image.repo is defined %}{{ base_image.repo }}/{% endif %}{{ base_image.name }}:{{ base_image.tag }}"
  when: base_image is defined

# On the ansible controller host, docker-gc is scheduled, so our previously built/pulled images might have been deleted.
# To avoid unnecessary builds/pulls from the internet, it first tries to pull the image from the private repo.
# (ignoring failures to support 1st time builds, and without being flagged as changed)
- name: Pull from private registry
  community.docker.docker_image:
    name: "{{ private_image }}"
    source: pull
  changed_when: False
  failed_when: False

- name: Pull from public registry and push to private registry
  community.docker.docker_image:
    name: "{{ public_image }}"
    repository: "{{ private_image }}"
    source: pull
    push: yes
  when:
    - not build | default('no') | bool
    - public_image is defined

- name: Complet build args
  ansible.builtin.set_fact:
    build_args_completed: "{{ build_args | default({}) | combine ({'from_image':  public_image }) }}"
  when:
    - build | default('no') | bool
    - public_image is defined

- name: Build and push docker image
  community.docker.docker_image:
    name: "{{ private_image }}"
    source: build
    force_source: yes
    build:
      path: "{{ build_path | default(role_path + '/app/build') }}"
      pull: yes
      args: "{{ build_args_completed | default({}) }}"
    push: yes
  when: build | default('no') | bool

- name: Reset build args
  ansible.builtin.set_fact:
    build_args_completed: {}
