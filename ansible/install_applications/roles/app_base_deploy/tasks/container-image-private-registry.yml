---
# This set of tasks is meant to be imported in each [app].deploy role
# It ensures the target container image is pushed in the private repository.

# For custom images, it builds the image, and pushes it to the private repo
# For standard images, it pulls the image, and pushes it to the private repo

# Usage :
#- name: Ensure app_name image is up-to-date in the private registry
#  ansible.builtin.import_tasks: ../../app_base_deploy/tasks/container-image-private-registry.yml
#  vars:
#    base_image:
#      repo: repo
#      name: image-name
#      tag: a.b.c
#    private_image: 
#      name: image-name
#      tag: a.b.c-custom
#    build: yes|no
#    build_path: "/path"
#    build_args: {}

- name: Generate image full names
  ansible.builtin.set_fact:
    public_image_full_name: "{{ base_image | image_full_name }}"
    private_image_full_name: "{{ private_image | image_full_name }}"

- name: Gather info on remote private image
  ansible.builtin.uri:
    url: "{{ docker_private_registry.api_url }}/v2/{{ private_image.name }}/manifests/{{ private_image.tag }}"
    url_username: "{{ docker_private_registry.username }}"
    url_password: "{{ docker_private_registry.password }}"
    ca_path: "{{ docker_private_registry.ca_path }}"
    status_code: [200, 404]
    headers:
      Accept: application/vnd.docker.distribution.manifest.v2+json
  register: private_image_remote_info

- name: Extract remote private image id
  set_fact:
    private_image_remote_id: >-
      {% if private_image_remote_info.status == 200 -%}
        {{ private_image_remote_info.json.config.digest | regex_replace('sha256:', '') }}
      {%- endif %}

- name: Gather info on local private image
  containers.podman.podman_image_info:
    name: "{{ private_image_full_name }}"
  register: private_image_local_info

- name: Extract local private image id
  set_fact:
    private_image_local_id: >-
      {% if private_image_local_info.images -%}
        {{ private_image_local_info.images[0].Id }}
      {%- endif %}

- name: Pull from public registry and tag to private registry
  block:
    - name: Pull from public registry
      containers.podman.podman_image:
        name: "{{ public_image_full_name }}"
        pull: yes
  
    - name: Gather info on public image
      containers.podman.podman_image_info:
        name: "{{ public_image_full_name }}"
      register: public_image_info

    - name: Tag to private registry
      command: "podman tag {{ public_image_full_name }} {{ private_image_full_name }}"
      when: private_image_local_id != public_image_info.images[0].Id
  when: not build | default('no') | bool

- name: Build custom image
  block:
    - name: Complete build args
      ansible.builtin.set_fact:
        build_args_completed: "{{ build_args | default({}) | combine ({'from_image':  public_image_full_name }) }}"

    - name: Generate podman build extra_args
      ansible.builtin.set_fact:
        build_extra_args: "{{ (build_extra_args | default([])) + [ one_arg ] }}"
      loop: "{{ build_args_completed | dict2items }}"
      vars:
          one_arg: "--build-arg={{ item.key }}={{ item.value }}"
      
    - name: Build container image
      containers.podman.podman_image:
        name: "{{ private_image_full_name }}"
        path: "{{ build_path | default(role_path + '/app/build') }}"
        build:
          extra_args: "{{ (build_extra_args | default([])) | join(' ') }}"
  when:
    - build | default('no') | bool
    - (not private_image_local_id or force_build | default('no') | bool)

# Always push, in case we had a failure during a previous push
# The previous logic looked for private_image_full_name, which is found locally if a push failed
- name: Push to private registry
  containers.podman.podman_image:
    name: "{{ private_image_full_name }}"
    pull: no
    push: yes
  # TODO : With multiple registry replicas, blob uploads can happen across multiple pods and sometimes fail with "upload resumed at wrong offest"
  # workaround : retry :/
  register: push_res
  retries: 5
  until: push_res is success

- name: Reset build args
  ansible.builtin.set_fact:
    build_args_completed: {}
