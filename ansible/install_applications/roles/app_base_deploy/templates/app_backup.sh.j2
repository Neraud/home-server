#!/usr/bin/env bash

# {{ ansible_managed }}

set -uo pipefail
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
BACKUP_SCRIPTS_DIR="${SCRIPT_DIR}/.."

{% if not app_backup.repository.enabled %}echo "Appps backup disabled" && exit 0{% endif %}

export RESTIC_REPOSITORY="{{ app_backup.repository.repository }}"
export RESTIC_PASSWORD="{{ app_backup.repository.password }}"
APP_NAME="{{ app_backup.name }}"
FAKE_HOST_NAME=kubernetes

VOLUME_MOUNT_ROOT=/tmp/volumes_backup

source ${BACKUP_SCRIPTS_DIR}/_restic.sh
source ${BACKUP_SCRIPTS_DIR}/_prometheus.sh
PROMETHEUS_OUTPUT_FILE="${PROMETHEUS_OUTPUT_DIR}/backup_app_${APP_NAME}.prom"
PROMETHEUS_OUTPUT_FILE_TMP=${PROMETHEUS_OUTPUT_FILE}.new
PROMETHEUS_LABEL_TYPE="restic"
PROMETHEUS_LABEL_REPO="{{ app_backup.repository.name }}"
PROMETHEUS_COMMON_LABELS="host=\"${FAKE_HOST_NAME}\",type=\"${PROMETHEUS_LABEL_TYPE}\",repo=\"${PROMETHEUS_LABEL_REPO}\""

app_status=0

function stop_app() {
{% if app_backup.apps_to_stop %}
    echo "Stopping applications"
    {% for app in app_backup.apps_to_stop %}
    echo " - {{ app.name }}"
    kubectl {{ kubectl_params }} --namespace={{ app.namespace }} scale {{ app.type }} {{ app.name }} --replicas=0
    {% endfor %}
    echo "Waiting for applications to stop"
    {% for app in app_backup.apps_to_stop %}
    echo " - {{ app.name }}"
    timeout 1m bash -c 'until test $(kubectl {{ kubectl_params }}  --namespace={{ app.namespace }} get {{ app.type }} {{ app.name }} -o json | jq -r ".status.replicas") -eq 0 ; do sleep 5 ; done'
    {% endfor %}
{% else %}
    echo "No application to stop, continuing"
{% endif %}
}

function backup_volume() {
    volume_name="$1"
    echo "--------------------------------------------------"
    echo "Volume : ${volume_name}"
    
    task_start=$(date +%s)
    task_status=0
    task_common_labels="app=\"${APP_NAME}\",path=\"${volume_name}\""
    tmp_output=$(mktemp)

    echo " - mounting"
    mkdir -p ${VOLUME_MOUNT_ROOT}/${volume_name}
    umount -q ${VOLUME_MOUNT_ROOT}/${volume_name}
    mount -t glusterfs {{ groups['glusterfs_servers'][0] }}:/${volume_name} ${VOLUME_MOUNT_ROOT}/${volume_name}
    
    echo " - backing up"
    # TODO tag app ?
    {{ restic_bin_path }} backup --host="${FAKE_HOST_NAME}" ${VOLUME_MOUNT_ROOT}/${volume_name} --json > ${tmp_output}
    task_status=$?
    
    echo " - unmounting"
    umount -l ${VOLUME_MOUNT_ROOT}/${volume_name}
    rmdir ${VOLUME_MOUNT_ROOT}/${volume_name}
    
    if [ ${task_status} -ne 0 ] ; then
        app_status=1
    fi
    
    task_end=$(date +%s)
    task_duration=$((task_end-task_start))

    echo "finished with status ${task_status}"
    cat ${tmp_output} | jq -r '. | select(.message_type == "summary")'
    add_prom_metric "backup_task_start" "${task_common_labels}" ${task_start}
    add_prom_metric "backup_task_duration" "${task_common_labels}" ${task_duration}
    add_prom_metric "backup_task_status" "${task_common_labels}" ${task_status}
    
    if [ ${task_status} -eq 0 ] ; then
        bytes_added=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .data_added')
        bytes_total=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .total_bytes_processed')
        files_new=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_new')
        files_modified=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_changed')
        files_unchanged=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_unmodified')
        dirs_new=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_new')
        dirs_modified=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_changed')
        dirs_unchanged=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_unmodified')

        add_prom_metric "backup_task_added_bytes" "${task_common_labels}" ${bytes_added}
        add_prom_metric "backup_task_total_bytes" "${task_common_labels}" ${bytes_total}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"new\"" ${files_new}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"modified\"" ${files_modified}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"unchanged\"" ${files_unchanged}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"new\"" ${dirs_new}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"modified\"" ${dirs_modified}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"unchanged\"" ${dirs_unchanged}
    fi

    rm ${tmp_output}
}

function restart_app() {
    echo ""
{% if app_backup.apps_to_stop %}
    echo "Restarting applications"
    {% for app in app_backup.apps_to_stop %}
    echo " - {{ app.name }}"
    kubectl {{ kubectl_params }} --namespace={{ app.namespace }} scale {{ app.type }} {{ app.name }} --replicas={{ app.replicas }}
    {% endfor %}
{% else %}
    echo "No application to restart, continuing"
{% endif %}
}

init_repo_if_necessary

init_backup_prom_file

stop_app

{% for vol in app_backup.gluster_volumes %}
backup_volume "{{ vol }}"
{% endfor %}

restart_app

finish_prom_file

exit ${app_status}
