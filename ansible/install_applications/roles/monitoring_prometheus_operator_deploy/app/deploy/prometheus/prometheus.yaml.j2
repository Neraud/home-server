apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: k8s
  namespace: {{ prometheus.namespace }}
  labels:
    {{ prometheus.labels_def | to_nice_yaml() | indent(4) }}
    {{ prometheus.labels_desc | to_nice_yaml() | indent(4) }}
spec:
  initContainers:
  - name: create-folders
    image: "{{ busybox.private_image | image_full_name }}"
    imagePullPolicy: Always
    command:
      - "sh"
      - "-c"
      - |
        mkdir -p /data/prometheus-db
        chown -R 1000:1000 /data/prometheus-db
    securityContext:
      runAsUser: 0
      runAsNonRoot: False
    volumeMounts:
    - name: prometheus-k8s-pv-claim
      mountPath: /data
  alerting:
    alertmanagers:
    - name: alertmanager-k8s
      namespace: {{ prometheus.namespace }}
      port: web
  enableFeatures: []
  image: "{{ prometheus.private_image | image_full_name }}"
  imagePullSecrets:
  - name: docker-config
  podMetadata:
    labels:
      {{ prometheus.labels_def | to_nice_yaml() | indent(6) }}
      {{ prometheus.labels_desc | to_nice_yaml() | indent(6) }}
  nodeSelector:
    kubernetes.io/os: linux
    capability/general-purpose: 'yes'
  podMonitorNamespaceSelector: {}
  podMonitorSelector: {}
  probeNamespaceSelector: {}
  probeSelector: {}
  replicas: 1
  externalUrl: https://prometheus.monitoring.intra.{{ web_base_domain }}/{{ prometheus.context_root }}
  resources:
    requests:
      cpu: "{{ prometheus.container.requests_cpu }}"
      memory: "{{ prometheus.container.requests_memory }}"
    limits:
      cpu: "{{ prometheus.container.limits_cpu }}"
      memory: "{{ prometheus.container.limits_memory }}"
  ruleNamespaceSelector: {}
  ruleSelector:
    matchLabels:
      {{ prometheus.labels_def | to_nice_yaml() | indent(6) }}
      role: alert-rules
  securityContext:
    fsGroup: 2000
    runAsNonRoot: true
    runAsUser: 1000
    # TODO : readOnlyRootFilesystem is present in the CRD, but it doesn't get injected at the container level
    # I guess this section is only applied at the POD level.
    #readOnlyRootFilesystem: true
  serviceAccountName: prometheus-k8s
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector: {}
  retention: {{ prometheus.retention }}
  storage:
    volumeClaimTemplate:
      metadata:
        name: prometheus-k8s-pv-claim
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
        resources:
          requests:
            storage: {{ prometheus.container.storage.data }}
        selector:
          matchLabels:
            {{ prometheus.labels_def | to_nice_yaml() | indent(4) }}
