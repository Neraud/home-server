# Copyright 2017 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: Namespace
metadata:
  name: {{ kubernetes_dashboard.namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}

---

kind: Service
apiVersion: v1
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard-certs
  namespace: {{ kubernetes_dashboard.namespace }}
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard-csrf
  namespace: {{ kubernetes_dashboard.namespace }}
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard-key-holder
  namespace: {{ kubernetes_dashboard.namespace }}
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard-settings
  namespace: {{ kubernetes_dashboard.namespace }}

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["kubernetes-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: {{ kubernetes_dashboard.namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubernetes-dashboard
subjects:
  - kind: ServiceAccount
    name: kubernetes-dashboard
    namespace: {{ kubernetes_dashboard.namespace }}

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(4) }}
  name: kubernetes-dashboard
  namespace: {{ kubernetes_dashboard.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(6) }}
  template:
    metadata:
      labels:
        {{ kubernetes_dashboard.labels_def | to_nice_yaml() | indent(8) }}
        {{ kubernetes_dashboard.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      containers:
        - name: kubernetes-dashboard
          image: "{{ kubernetes_dashboard.container.image }}"
          imagePullPolicy: Always
          ports:
            - name: https
              containerPort: 8443
              protocol: TCP
          args:
            - --auto-generate-certificates
            - --namespace={{ kubernetes_dashboard.namespace }}
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          resources:
            requests:
              cpu: "{{ kubernetes_dashboard.container.requests_cpu }}"
              memory: "{{ kubernetes_dashboard.container.requests_memory }}"
            limits:
              cpu: "{{ kubernetes_dashboard.container.limits_cpu }}"
              memory: "{{ kubernetes_dashboard.container.limits_memory }}"
          volumeMounts:
            - name: kubernetes-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: https
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: https
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: kubernetes-dashboard-certs
          secret:
            secretName: kubernetes-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---

kind: Service
apiVersion: v1
metadata:
  labels:
    {{ kubernetes_dashboard_metrics_scraper.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard_metrics_scraper.labels_desc | to_nice_yaml() | indent(4) }}
  name: dashboard-metrics-scraper
  namespace: {{ kubernetes_dashboard.namespace }}
spec:
  ports:
    - port: 8000
      targetPort: http
  selector:
    {{ kubernetes_dashboard_metrics_scraper.labels_def | to_nice_yaml() | indent(4) }}

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    {{ kubernetes_dashboard_metrics_scraper.labels_def | to_nice_yaml() | indent(4) }}
    {{ kubernetes_dashboard_metrics_scraper.labels_desc | to_nice_yaml() | indent(4) }}
  name: dashboard-metrics-scraper
  namespace: {{ kubernetes_dashboard.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{ kubernetes_dashboard_metrics_scraper.labels_def | to_nice_yaml() | indent(6) }}
  template:
    metadata:
      labels:
        {{ kubernetes_dashboard_metrics_scraper.labels_def | to_nice_yaml() | indent(8) }}
        {{ kubernetes_dashboard_metrics_scraper.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      containers:
        - name: dashboard-metrics-scraper
          image: "{{ kubernetes_dashboard_metrics_scraper.container.image }}"
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          resources:
            requests:
              cpu: "{{ kubernetes_dashboard_metrics_scraper.container.requests_cpu }}"
              memory: "{{ kubernetes_dashboard_metrics_scraper.container.requests_memory }}"
            limits:
              cpu: "{{ kubernetes_dashboard_metrics_scraper.container.limits_cpu }}"
              memory: "{{ kubernetes_dashboard_metrics_scraper.container.limits_memory }}"
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
