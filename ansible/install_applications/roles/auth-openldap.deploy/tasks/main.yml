---
- name: Ensure OpenLDAP namespace exists
  import_tasks: ../../_base.deploy/tasks/custom-namespace.yml
  vars:
    application_namespace: "{{ openldap.namespace }}"

- name: Deploy OpenLDAP backup script
  import_tasks: ../../_base.deploy/tasks/backup.yml
  vars:
    app_backup: "{{ openldap.app_backup }}"
  tags: backup

- name: Ensure OpenLDAP image is up-to-date in the private registry
  import_tasks: ../../_base.deploy/tasks/docker-image-private-registry.yml
  vars:
    base_image: "{{ openldap.base_image }}"
    private_image: "{{ openldap.container.image }}"

- name: Read certificate files
  slurp:
    src: "{{ item }}"
  register: openldap_generated_certificate_files
  with_items:
    - "{{ custom_ssl_pki_generation_root_dir }}/cluster/ca.crt"
    - "{{ custom_ssl_pki_generation_root_dir }}/cluster/ldap/server.crt"
    - "{{ custom_ssl_pki_generation_root_dir }}/cluster/ldap/server.key"
    - "{{ custom_ssl_pki_generation_root_dir }}/cluster/ldap/dhparam.pem"

- name: List config files
  set_fact:
    openldap_config_files: "{{ openldap_config_files | default([]) + [ item ] }}"
  with_fileglob:
    - "{{ role_path }}/app/config/*.yaml*"

- name: Deploy OpenLDAP
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubeconfig_context }}"
  with_fileglob:
    - "{{ role_path }}/app/deploy/*.yaml*"

- name: Wait for OpenLDAP to be available
  k8s_info:
    kind: StatefulSet
    namespace: "{{ openldap.namespace }}"
    name: openldap
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubeconfig_context }}"
  register: k8s_result
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 30
  delay: 5

# On first start, OpenLdap restarts to run its setup process
# So if the first wait task has waited, we make sure it's really still up a few seconds later
- name: Wait a bit ...
  pause:
    seconds: 10
  when: k8s_result.attempts > 1

- name: Wait for OpenLDAP to be available
  k8s_info:
    kind: StatefulSet
    namespace: "{{ openldap.namespace }}"
    name: openldap
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubeconfig_context }}"
  register: k8s_result
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 30
  delay: 5
  when: k8s_result.attempts > 1

- name: Create LDAP base OUs
  ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "{{ item }}"
    objectClass: organizationalUnit
    state: present
  with_items:
    - "{{ openldap.ldap.structure_users_ou_dn }}"
    - "{{ openldap.ldap.structure_groups_ou_dns | dict2items | map(attribute='value') | list }}"

- name: Create LDAP users
  ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    objectClass: inetOrgPerson
    state: present
    attributes:
      sn: "{{ item.sn }}"
  with_items: "{{ openldap.ldap.users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP users attributes
  ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    attributes:
      displayName: "{{ item.displayName }}"
      uid: "{{ item.id }}"
      mail: "{{ item.email }}"
    state: exact
  loop: "{{ openldap.ldap.users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP users password
  ldap_passwd:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    passwd: "{{ item.password }}"
  with_items: "{{ openldap.ldap.users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Create LDAP groups
  ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_groups_ou_dns[item.ou] }}"
    objectClass: GroupOfUniqueNames
    state: present
    attributes:
      uniqueMember: ""
  with_items: "{{ openldap.ldap.groups | default([]) }}"

- name: Set LDAP groups attributes
  ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_groups_ou_dns[item.ou] }}"
    attributes:
      description: "{{ item.description }}"
    state: exact
  loop: "{{ openldap.ldap.groups | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP groups members
  ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_groups_ou_dns[item.ou] }}"
    attributes:
      uniqueMember: "{{ item.members | map('regex_replace', '^(.*)$', 'cn=\\1,' + openldap.ldap.structure_users_ou_dn) | list }}"
    state: exact
  loop: "{{ openldap.ldap.groups | default([]) }}"
  when: item.members | default([]) | length > 0
  loop_control:
    label: "{{ item.id }} : {{ item.members | default([]) }}"
