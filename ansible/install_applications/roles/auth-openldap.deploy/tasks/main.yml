---

- name: Install python dependencies
  apt:
    pkg:
    - python3-ldap
    state: present

- name: Read certificate files
  slurp:
    src: "{{ item }}"
  register: openldap_generated_certificate_files
  with_items:
    - "{{ custom_ssl_pki_root_dir }}/cluster/ca.crt"
    - "{{ custom_ssl_pki_root_dir }}/cluster/ldap/server.crt"
    - "{{ custom_ssl_pki_root_dir }}/cluster/ldap/server.key"
    - "{{ custom_ssl_pki_root_dir }}/cluster/ldap/dhparam.pem"

- name: List config files
  set_fact:
    openldap_config_files: "{{ openldap_config_files | default([]) + [ item ] }}"
  with_fileglob:
    - "{{ role_path }}/app/config/*.yaml*"

- name: Deploy OpenLDAP
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
  with_fileglob:
    - "{{ role_path }}/app/deploy/*.yaml*"
  become: yes
  become_user: "{{ kubernetes_user.name }}"

- name: Fetch openldap internal endpoint
  k8s_facts:
    api_version: v1
    kind: Service
    name: openldap
    namespace: default
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  register: openldap_service

- name: Set openldap internal endpoint
  set_fact:
    openldap_internal_uri: "ldap://{{ openldap_service.resources[0].spec.clusterIP }}"

- name: Wait for OpenLDAP to be available
  wait_for:
    host: "{{ openldap_service.resources[0].spec.clusterIP }}"
    port: 389
    sleep: 5
    timeout: 300
  register: wait_for_openldap_result

# When the container starts, the port may be open but the OpenLDAP service might not be available yet, so we wait a bit more
# TODO : find a better way to detect that OpenLDAP is available
- name: Wait for OpenLDAP to be really available
  wait_for:
    timeout: 30
  when: wait_for_openldap_result.elapsed > 0

- name: Create LDAP base OUs
  ldap_entry:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "{{ item }}"
    objectClass: organizationalUnit
    state: present
  with_items:
    - "{{ openldap.ldap.structure_users_ou_dn }}"
    - "{{ openldap.ldap.structure_groups_ou_dns | dict2items | map(attribute='value') | list }}"

- name: Create LDAP users
  ldap_entry:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    objectClass: inetOrgPerson
    state: present
    attributes:
      sn: "{{ item.sn }}"
  with_items: "{{ openldap.ldap.users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP users attributes
  ldap_attr:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.0.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    name: "{{ item.1.name }}"
    values: "{{ item.0[item.1.key] }}"
    state: exact
  with_nested:
     - "{{ openldap.ldap.users | default([]) }}"
     - - name: displayName
         key: displayName
       - name: uid
         key: id
       - name: mail
         key: email
  loop_control:
    label: "{{ item.0.id }} : {{ item.1.name }} = {{ item.0[item.1.key] }}"

- name: Set LDAP users password
  ldap_passwd:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_users_ou_dn }}"
    passwd: "{{ item.password }}"
  with_items: "{{ openldap.ldap.users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Create LDAP groups
  ldap_entry:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_groups_ou_dns[item.ou] }}"
    objectClass: GroupOfUniqueNames
    state: present
    attributes:
      uniqueMember: ""
  with_items: "{{ openldap.ldap.groups | default([]) }}"

- name: Set LDAP groups attributes
  ldap_attr:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.0.id }},{{ openldap.ldap.structure_groups_ou_dns[item.0.ou] }}"
    name: "{{ item.1.name }}"
    values: "{{ item.0[item.1.key] }}"
    state: exact
  with_nested:
     - "{{ openldap.ldap.groups | default([]) }}"
     - - name: description
         key: description
  loop_control:
    label: "{{ item.0.id }} : {{ item.1.name }} = {{ item.0[item.1.key] }}"

- name: Set LDAP groups members
  ldap_attr:
    server_uri: "{{ openldap_internal_uri }}"
    bind_dn: "{{ openldap.ldap.admin_dn }}"
    bind_pw: "{{ openldap.ldap.admin_password }}"
    start_tls: yes
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap.ldap.structure_groups_ou_dns[item.ou] }}"
    name: "uniqueMember"
    values: "{{ item.members | map('regex_replace', '(.*)', 'cn=\\1,' + openldap.ldap.structure_users_ou_dn) | list }}"
    state: exact
  with_items: "{{ openldap.ldap.groups | default([]) }}"
  when: item.members | default([]) | length > 0
  loop_control:
    label: "{{ item.id }} : {{ item.members | default([]) }}"
