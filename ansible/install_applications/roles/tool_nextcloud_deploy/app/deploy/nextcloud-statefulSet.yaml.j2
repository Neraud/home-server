apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nextcloud
  namespace: {{ nextcloud.namespace }}
  labels:
    {{ nextcloud.labels_def | to_nice_yaml() | indent(4) }}
    {{ nextcloud.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ nextcloud.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ nextcloud.labels_def | to_nice_yaml() | indent(8) }}
        {{ nextcloud.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      initContainers:
      - name: create-folders
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /mnt/nextcloud-app/config
            mkdir -p /mnt/nextcloud-app/custom_apps
            mkdir -p /mnt/nextcloud-app/themes
            chown -R 33:33 /mnt/nextcloud-app/*
        volumeMounts:
        - name: nextcloud-app-pv-claim
          mountPath: /mnt/nextcloud-app
      - name: wait-for-requirements
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command: 
          - "sh"
          - "-c"
          - |
            echo "Waiting for Mysql DB"
            timeout 120s sh -c "while ! nc -z -w 0 mysql 3306 ; do echo 'Still waiting ...' ; sleep 5 ; done"
            ret=$?
            echo "return : $ret"
            if [ $ret -eq 0 ] ; then
              echo "MySQL DB Server has started"
            else
              echo "FAILED : MySQL DB Server isn't available"
              exit 1
            fi
            
            echo "Waiting for Redis"
            timeout 30s sh -c "while ! nc -z -w 0 redis 6379 ; do echo 'Still waiting ...' ; sleep 5 ; done"
            ret=$?
            echo "return : $ret"
            if [ $ret -eq 0 ] ; then
              echo "Redis Server has started"
            else
              echo "FAILED : Redis Server isn't available"
              exit 1
            fi
      containers:
      - name: nextcloud
        image: "{{ nextcloud.private_image | image_full_name }}"
        imagePullPolicy: Always
        env:
        - name: NEXTCLOUD_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: nextcloud
              key: admin_user
        - name: NEXTCLOUD_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nextcloud
              key: admin_password
        - name: NEXTCLOUD_TRUSTED_DOMAINS
          value: "nextcloud.tool.intra.{{ web_base_domain }}"
        - name: OVERWRITEHOST
          value: "nextcloud.tool.intra.{{ web_base_domain }}"
        - name: OVERWRITECLIURL
          value: "nextcloud.tool.intra.{{ web_base_domain }}"
        - name: OVERWRITEPROTOCOL
          value: "https"
        - name: MYSQL_HOST
          value: "mysql"
        - name: MYSQL_DATABASE
          value: "{{ nextcloud_mysql.database }}"
        - name: MYSQL_USER
          value: "{{ nextcloud_mysql.user }}"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-pass
              key: password
        - name: REDIS_HOST
          value: "redis"
        - name: REDIS_HOST_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: password
        - name: SMTP_HOST
          value: "{{ nextcloud.smtp.host }}"
        - name: SMTP_SECURE
          value: "{{ nextcloud.smtp.secure }}"
        - name: SMTP_PORT
          value: "{{ nextcloud.smtp.port }}"
        - name: SMTP_NAME
          valueFrom:
            secretKeyRef:
              name: nextcloud
              key: smtp_user
        - name: SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nextcloud
              key: smtp_password
        - name: MAIL_FROM_ADDRESS
          value: "{{ nextcloud.smtp.from_address }}"
        - name: MAIL_DOMAIN
          value: "{{ nextcloud.smtp.from_domain }}"
        - name: NEXTCLOUD_LDAP_HOST
          value: "{{ nextcloud.ldap.host }}"
        - name: NEXTCLOUD_LDAP_PORT
          value: "{{ nextcloud.ldap.port }}"
        - name: NEXTCLOUD_LDAP_AGENT_NAME
          value:  "{{ nextcloud.ldap.bind_dn }}"
        - name: NEXTCLOUD_LDAP_AGENT_PASSWORD
          value:  "{{ nextcloud.ldap.bind_password }}"
        - name: NEXTCLOUD_LDAP_BASE
          value: "{{ nextcloud.ldap.base }}"
        - name: NEXTCLOUD_LDAP_BASE_USERS
          value: "{{ nextcloud.ldap.users_dn }}"
        - name: NEXTCLOUD_LDAP_USER_FILTER
          value: "(&(objectClass=inetOrgPerson)(memberOf={{ nextcloud.ldap.group }}))"
        - name: NEXTCLOUD_LDAP_LOGIN_FILTER
          value: "(&(&(objectClass=inetOrgPerson)(memberOf={{ nextcloud.ldap.group }}))(|(cn=%uid)(mail=%uid)))"
        - name: NEXTCLOUD_LDAP_DISPLAY_NAME
          value: "{{ nextcloud.ldap.display_name }}"
        - name: NEXTCLOUD_LDAP_EMAIL_ATTRIBUTE
          value: "{{ nextcloud.ldap.email_attribute }}"
        - name: NEXTCLOUD_LDAP_BASE_GROUPS
          value: "{{ nextcloud.ldap.groups_dn }}"
        - name: NEXTCLOUD_LDAP_GROUP_FILTER
          value: "(objectClass=groupOfUniqueNames)"
        - name: PHP_MEMORY_LIMIT
          value: "{{ nextcloud.php_memory_limit }}"
        - name: PHP_UPLOAD_LIMIT
          value: "{{ nextcloud.php_upload_limit }}"
        ports:
        - containerPort: 8080
          name: web
        securityContext:
          runAsNonRoot: true
          runAsUser: 33 # www-data
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /status.php
            port: web
            httpHeaders:
              - name: Host
                value: "nextcloud.tool.intra.{{ web_base_domain }}"
        resources:
          requests:
            cpu: "{{ nextcloud.container.requests_cpu }}"
            memory: "{{ nextcloud.container.requests_memory }}"
          limits:
            cpu: "{{ nextcloud.container.limits_cpu }}"
            memory: "{{ nextcloud.container.limits_memory }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: nextcloud-app-pv-claim
          mountPath: /usr/src/nextcloud/config
          subPath: config
        - name: nextcloud-app-pv-claim
          mountPath: /usr/src/nextcloud/custom_apps
          subPath: custom_apps
        - name: nextcloud-app-pv-claim
          mountPath: /usr/src/nextcloud/themes
          subPath: themes
        - name: nextcloud-data
          mountPath: /usr/src/nextcloud/data
          subPath: data
        - name: nextcloud-secret
          mountPath: /usr/src/nextcloud/config_custom/smtp_custom.config.php
          subPath: smtp_custom.config.php
        - name: nextcloud-secret
          mountPath: /etc/ldap/ldap.conf
          subPath: ldap.conf
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: nextcloud-data
        persistentVolumeClaim:
          claimName: nfs-nextcloud
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: nextcloud-secret
        secret:
          secretName: nextcloud
      - name: tmp-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: nextcloud-app-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: {{ nextcloud.container.storage.data }}
      selector:
        matchLabels:
          {{ nextcloud.labels_def | to_nice_yaml() | indent(10) }}
          storage: app
