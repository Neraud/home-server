---

- name: Ensure TT-RSS namespace exists
  import_tasks: ../../_base.deploy/tasks/custom-namespace.yml
  vars:
    application_namespace: "{{ ttrss.namespace }}"

- name: Ensure TT-RSS image is up-to-date in the private registry
  import_tasks: ../../_base.deploy/tasks/docker-image-private-registry.yml
  vars:
    base_image: "{{ ttrss.base_image }}"
    private_image: "{{ ttrss.container.image }}"
    build: yes
    build_args:
      ttrss_commit: "{{ ttrss.commit }}"
      ttrss_plugin_data_migration_commit: "{{ ttrss.plugins.data_migration.commit }}"
      ttrss_plugin_auth_ldap_commit: "{{ ttrss.plugins.auth_ldap.commit }}"
      ttrss_plugin_mailer_smtp_commit: "{{ ttrss.plugins.mailer_smtp.commit }}"

- name: Ensure TT-RSS PGSQL image is up-to-date in the private registry
  import_tasks: ../../_base.deploy/tasks/docker-image-private-registry.yml
  vars:
    base_image: "{{ ttrss_pgsql.base_image }}"
    private_image: "{{ ttrss_pgsql.container.image }}"

# We can't just use a lookup('url', ttrss_pgsql.schema_url) to inject the schema file directly.
# This gets blocked by a 403, probably due to a user-agent filter on TT-RSS Gogs.
- name: Download the TT-RSS schema
  get_url:
    dest: "{{ ttrss_pgsql.schema_path_temp }}"
    url: "{{ ttrss_pgsql.schema_url }}"
  changed_when: False

- name: Deploy TT-RSS
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
  with_fileglob:
    - "{{ role_path }}/app/deploy/*.yaml*"
  become: yes
  become_user: "{{ kubernetes_user.name }}"

- name: Remove the TT-RSS schema
  file:
    path: "{{ ttrss_pgsql.schema_path_temp }}"
    state: absent
  changed_when: False
