apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    {{ grafana.labels_def | to_nice_yaml() | indent(4) }}
    {{ grafana.labels_desc | to_nice_yaml() | indent(4) }}
  name: grafana
  namespace: {{ grafana.namespace }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{ grafana.labels_def | to_nice_yaml() | indent(6) }}
  template:
    metadata:
      labels:
        {{ grafana.labels_def | to_nice_yaml() | indent(8) }}
        {{ grafana.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      automountServiceAccountToken: false
      initContainers:
      - name: create-folders
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /grafana/data
            chown -R 472:472 /grafana/data
        volumeMounts:
        - name: grafana-pv-claim
          mountPath: /grafana
      containers:
      - image: "{{ grafana.private_image | image_full_name }}"
        name: grafana
        env:
        - name: GF_SERVER_ROOT_URL
          value: https://grafana.monitoring.intra.{{ web_base_domain }}{{ grafana.context_root }}
        - name: GF_INSTALL_PLUGINS
          value: {{ grafana.plugins | join(',') }}
        ports:
        - containerPort: 3000
          name: http
        securityContext:
          runAsNonRoot: true
          runAsUser: 472 # grafana
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ grafana.container.requests_cpu }}"
            memory: "{{ grafana.container.requests_memory }}"
          limits:
            cpu: "{{ grafana.container.limits_cpu }}"
            memory: "{{ grafana.container.limits_memory }}"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - mountPath: /var/lib/grafana
          name: grafana-pv-claim
          readOnly: false
          subPath: data
        - mountPath: /etc/grafana/grafana.ini
          name: grafana-etc
          subPath: grafana.ini
        - mountPath: /etc/grafana/ldap.toml
          name: grafana-etc
          subPath: ldap.toml
        - mountPath: /etc/grafana/provisioning/datasources
          name: grafana-datasources
          readOnly: false
        - mountPath: /etc/grafana/provisioning/dashboards
          name: grafana-dashboard-providers
          readOnly: false
        - mountPath: /grafana-dashboard-definitions/0/grafana-dashboards-config
          name: grafana-dashboards-config
          readOnly: false
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
        - mountPath: /tmp
          name: tmp-plugins
          readOnly: false
      nodeSelector:
        beta.kubernetes.io/os: linux
        capability/general-purpose: 'yes'
      serviceAccountName: grafana
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: grafana-etc
        configMap:
          name: grafana-etc
      - name: grafana-datasources
        secret:
          secretName: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - emptyDir:
          medium: Memory
        name: tmp-plugins
      imagePullSecrets:
      - name: docker-config
  volumeClaimTemplates:
  - metadata:
      name: grafana-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_longhorn_low_durability_storage_class_name }}
      resources:
        requests:
          storage: {{ grafana.container.storage.data }}
