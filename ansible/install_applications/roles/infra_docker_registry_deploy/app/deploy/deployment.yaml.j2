apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: {{ docker_registry.namespace }}
  labels:
    {{ docker_registry.labels_def | to_nice_yaml() | indent(4) }}
    {{ docker_registry.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ docker_registry.container.replicas }}
  selector:
    matchLabels:
      {{ docker_registry.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ docker_registry.labels_def | to_nice_yaml() | indent(8) }}
        {{ docker_registry.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      initContainers:
      - name: create-data-dir
        image: "{{ busybox.public_image | image_full_name }}"
        # Don't always pull to avoid issues when restarting (eg: dockerhub limit)
        imagePullPolicy: IfNotPresent
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /var/lib/registry/docker
            chown -R 1000:1000 /var/lib/registry/*
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: docker-registry-data
          mountPath: /var/lib/registry
      containers:
      - name: docker-registry
        image: "{{ docker_registry.base_image | image_full_name }}"
        # Don't always pull to avoid issues when restarting (eg: dockerhub limit)
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5443
          name: https
        - containerPort: 5001
          name: debug
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /
            port: https
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ docker_registry.container.requests_cpu }}"
            memory: "{{ docker_registry.container.requests_memory }}"
          limits:
            cpu: "{{ docker_registry.container.limits_cpu }}"
            memory: "{{ docker_registry.container.limits_memory }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: docker-registry-data
          mountPath: /var/lib/registry
        - name: docker-registry-config
          mountPath: /etc/docker/registry/config.yml
          subPath: config.yml
        - name: docker-registry-auth
          mountPath: /etc/docker/registry/htpasswd
          subPath: htpasswd
        - name: certs-volume
          mountPath: /certs
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: docker-registry-config
        configMap:
          name: docker-registry-config
      - name: docker-registry-auth
        secret:
          secretName: docker-registry-auth
      - name: certs-volume
        secret:
          secretName: docker-registry-certs
      - name: docker-registry-data
        persistentVolumeClaim:
          claimName: docker-registry-pv-claim
      nodeSelector:
        capability/general-purpose: 'yes'
