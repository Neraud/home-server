apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: heimdall
  namespace: {{ heimdall.namespace }}
  labels:
    {{ heimdall.labels_def | to_nice_yaml() | indent(4) }}
    {{ heimdall.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ heimdall.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ heimdall.labels_def | to_nice_yaml() | indent(8) }}
        {{ heimdall.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      containers:
      - image: "{{ heimdall.container.image }}"
        name: heimdall
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: "{{ heimdall.container.requests_cpu }}"
            memory: "{{ heimdall.container.requests_memory }}"
          limits:
            cpu: "{{ heimdall.container.limits_cpu }}"
            memory: "{{ heimdall.container.limits_memory }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
        - name: heimdall-data-pv-claim
          mountPath: /config
        - name: heimdall-config
          mountPath: /config/www/.env
          subPath: .env
        - name: heimdall-config
          mountPath: /config/applicationsLoader.php
          subPath: applicationsLoader.php
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: heimdall-config
        configMap:
          name: heimdall-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: heimdall-data-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: 128M
      selector:
        matchLabels:
          {{ heimdall.labels_def | to_nice_yaml() | indent(10) }}
