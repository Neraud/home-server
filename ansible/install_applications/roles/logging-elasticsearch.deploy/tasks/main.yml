---

- name: Ensure ElasticSearch namespace exists
  import_tasks: ../../_base.deploy/tasks/custom-namespace.yml
  vars:
    application_namespace: "{{ elasticsearch.namespace }}"

- name: Ensure ElasticSearch image is up-to-date in the private registry
  import_tasks: ../../_base.deploy/tasks/docker-image-private-registry.yml
  vars:
    base_image: "{{ elasticsearch.base_image }}"
    private_image: "{{ elasticsearch.container.image }}"

- name: Ensure ElasticSearch Exporter image is up-to-date in the private registry
  import_tasks: ../../_base.deploy/tasks/docker-image-private-registry.yml
  vars:
    base_image: "{{ elasticsearch_exporter.base_image }}"
    private_image: "{{ elasticsearch_exporter.container.image }}"

- name: Read generated files
  slurp:
    src: "{{ item }}"
  register: elasticsearch_generated_certificate_files
  with_items:
    - "{{ custom_ssl_pki_root_dir }}/cluster/ca.crt"
    - "{{ custom_ssl_pki_root_dir }}/cluster/elasticsearch/server.crt"
    - "{{ custom_ssl_pki_root_dir }}/cluster/elasticsearch/server.key"

- name: List included security config files
  set_fact:
    elasticsearch_security_config_files: "{{ elasticsearch_security_config_files | default([]) + [ item ] }}"
  with_fileglob:
    - "{{ role_path }}/app/config/security/*.yml*"

- name: Deploy ElasticSearch
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
  register: elasticsearch_deployment
  with_fileglob:
    - "{{ role_path }}/app/deploy/*.yaml*"
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  notify: "Reconfigure Elasticsearch security"

- name: Deploy ElasticSearch Exporter
  k8s:
    definition: "{{ lookup(item | regex_search('.j2$') | ternary('template','file'), item) }}"
    state: present
  with_fileglob:
    - "{{ role_path }}/app/deploy/prometheus_exporter/*.yaml*"
  become: yes
  become_user: "{{ kubernetes_user.name }}"

- name: Wait for ElasticSearch to be available
  k8s_info:
    kind: StatefulSet
    namespace: "{{ elasticsearch.namespace }}"
    name: elasticsearch
  register: k8s_result
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 60
  delay: 3

# On first start, ElasticSearch restarts to run its setup process
# So if the first wait task has waited, we make sure it's really still up a few seconds later
- name: Wait a bit ...
  pause:
    seconds: 10
  when: k8s_result.attempts > 1

- name: Wait for ElasticSearch to be available
  k8s_info:
    kind: StatefulSet
    namespace: "{{ elasticsearch.namespace }}"
    name: elasticsearch
  register: k8s_result
  become: yes
  become_user: "{{ kubernetes_user.name }}"
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 60
  delay: 3

