apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: homeassistant
  namespace: {{ homeassistant.namespace }}
  labels:
    {{ homeassistant.labels_def | to_nice_yaml() | indent(4) }}
    {{ homeassistant.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ homeassistant.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ homeassistant.labels_def | to_nice_yaml() | indent(8) }}
        {{ homeassistant.labels_desc | to_nice_yaml() | indent(8) }}
      annotations:
        k8s.v1.cni.cncf.io/networks: {{ k8s_bridge_fullname }}
    spec:
      initContainers:
      - name: create-folders
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            if [ -d /homeassistant-config/config ] ; then
              echo "HomeAssistant config folder already exists, ignoring bootstrap"
            else
              echo "HomeAssistant config folder doesn't exist, injecting bootstrap"
              mkdir -p /homeassistant-config/config
              cp -RL /homeassistant-config-bootstrap/* /homeassistant-config/config/
            fi
            mkdir -p /homeassistant-config/.cache
            mkdir -p /homeassistant-config/.config
            mkdir -p /homeassistant-config/.local
            chown -R 1000:1000 /homeassistant-config/config
            chown -R 1000:1000 /homeassistant-config/.cache
            chown -R 1000:1000 /homeassistant-config/.config
            chown -R 1000:1000 /homeassistant-config/.local
        volumeMounts:
        - name: homeassistant-pv-claim
          mountPath: /homeassistant-config
        - name: homeassistant-config-bootstrap
          mountPath: /homeassistant-config-bootstrap
      containers:
      - name: homeassistant
        image: "{{ homeassistant.private_image | image_full_name }}"
        imagePullPolicy: Always        
        ports:
        - containerPort: 8123
          name: homeassistant
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: homeassistant-pv-claim
          mountPath: /config
          subPath: config
        - name: homeassistant-pv-claim
          mountPath: /home/homeassistant/.cache
          subPath: .cache
        - name: homeassistant-pv-claim
          mountPath: /home/homeassistant/.config
          subPath: .config
        - name: homeassistant-pv-claim
          mountPath: /home/homeassistant/.local
          subPath: .local
        - name: homeassistant-socat-config
          mountPath: /etc/supervisor/conf.d/
        - name: homeassistant-config
          mountPath: /opt/ldap-auth/config.cfg
          subPath: ldap-auth-config.cfg
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.cert
          subPath: ca.crt
        - name: run-volume
          mountPath: /run/udev
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000 # homeassistant
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: homeassistant
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ homeassistant.container.requests_cpu }}"
            memory: "{{ homeassistant.container.requests_memory }}"
          limits:
            cpu: "{{ homeassistant.container.limits_cpu }}"
            memory: "{{ homeassistant.container.limits_memory }}"
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: homeassistant-config
        configMap:
          name: homeassistant-config
      - name: homeassistant-config-bootstrap
        configMap:
          name: homeassistant-config-bootstrap
      - name: homeassistant-socat-config
        configMap:
          name: homeassistant-socat-config
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: run-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: homeassistant-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: {{ homeassistant.container.storage.data }}
      selector:
        matchLabels:
          {{ homeassistant.labels_def | to_nice_yaml() | indent(10) }}
