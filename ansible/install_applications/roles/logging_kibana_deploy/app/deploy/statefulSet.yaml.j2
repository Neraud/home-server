apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kibana
  namespace: {{ kibana.namespace }}
  labels:
    {{ kibana.labels_def | to_nice_yaml() | indent(4) }}
    {{ kibana.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      {{ kibana.labels_def | to_nice_yaml() | indent(6) }}
  template:
    metadata:
      labels:
        {{ kibana.labels_def | to_nice_yaml() | indent(8) }}
        {{ kibana.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      initContainers:
      - name: create-data-dir
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /kibana-data/data
            chown -R 1000:1000 /kibana-data/*
        securityContext:
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: kibana-data-pv-claim
          mountPath: /kibana-data
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: kibana-config
        configMap:
          name: kibana
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: tmp-volume
        emptyDir: {}
      containers:
      - name: kibana
        image: "{{ kibana.private_image | image_full_name }}"
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: {{ '/' if kibana.context_root == '' else kibana.context_root + '/?(.*)' }}
            port: http
          initialDelaySeconds: 3
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
        resources:
          requests:
            cpu: "{{ kibana.container.requests_cpu }}"
            memory: "{{ kibana.container.requests_memory }}"
          limits:
            cpu: "{{ kibana.container.limits_cpu }}"
            memory: "{{ kibana.container.limits_memory }}"
        env:
        - name: NODE_OPTIONS
          value: "--max-old-space-size={{ kibana.nodejs_max_memory }}"
        ports:
        - name: http
          containerPort: 5601
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: kibana-config
          mountPath: /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
          subPath: opensearch_dashboards.yml
        - name: kibana-data-pv-claim
          mountPath: /usr/share/opensearch-dashboards/data
          subPath: data
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: kibana-config
        configMap:
          name: kibana
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: tmp-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: kibana-data-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_longhorn_low_durability_storage_class_name }}
      resources:
        requests:
          storage: {{ kibana.container.storage.data }}
