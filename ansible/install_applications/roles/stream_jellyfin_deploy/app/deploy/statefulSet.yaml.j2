apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jellyfin
  namespace: {{ jellyfin.namespace }}
  labels:
    {{ jellyfin.labels_def | to_nice_yaml() | indent(4) }}
    {{ jellyfin.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ jellyfin.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ jellyfin.labels_def | to_nice_yaml() | indent(8) }}
        {{ jellyfin.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      initContainers:
      - name: create-folders
        image: "{{ busybox.private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            mkdir -p /jellyfin/config
            chown 1000:1000 /jellyfin/config
        volumeMounts:
        - name: jellyfin-pv-claim
          mountPath: /jellyfin
      - name: inject-conf
        image: "{{ jellyfin.conf_injection_private_image | image_full_name }}"
        imagePullPolicy: Always
        volumeMounts:
        - name: jellyfin-config
          mountPath: /config-source
        - name: jellyfin-pv-claim
          mountPath: /config-target
          subPath: config
      - name: inject-certificate
        image: "{{ jellyfin.conf_injection_private_image | image_full_name }}"
        imagePullPolicy: Always
        command:
          - "sh"
          - "-c"
          - |
            cp /etc/ssl/certs/ca-certificates.crt /tmp-cert
            cat /etc/ssl/cluster/ca.crt >> /tmp-cert/ca-certificates.crt
        volumeMounts:
        - name: cluster-ca-volume
          mountPath: /etc/ssl/cluster/ca.crt
          subPath: ca.crt
        - name: tmp-cert-volume
          mountPath: /tmp-cert
      containers:
      - image: "{{ jellyfin.private_image | image_full_name }}"
        name: jellyfin
        ports:
        - containerPort: 8096
          name: jellyfin
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: {{ '/' if jellyfin.context_root == '' else jellyfin.context_root }}
            port: jellyfin
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ jellyfin.container.requests_cpu }}"
            memory: "{{ jellyfin.container.requests_memory }}"
          limits:
            cpu: "{{ jellyfin.container.limits_cpu }}"
            memory: "{{ jellyfin.container.limits_memory }}"
{% if jellyfin.container.limits_gpu %}
            {{ jellyfin.container.limits_gpu | to_nice_yaml() | indent(12) }}
{% endif %}
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
        - name: jellyfin-pv-claim
          mountPath: /config
          subPath: config
        - name: tmp-cache-volume
          mountPath: /cache
        - name: tmp-transcodes-volume
          mountPath: /config/transcodes
        - name: jellyfin-multimedia
          mountPath: /media
        - name: tmp-cert-volume
          mountPath: /etc/ssl/certs/ca-certificates.crt
          subPath: ca-certificates.crt
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: jellyfin-config
        configMap:
          name: jellyfin-config
      - name: jellyfin-multimedia
        persistentVolumeClaim:
          claimName: nfs-multimedia
      - name: cluster-ca-volume
        secret:
          secretName: cluster-ca
      - name: tmp-volume
        emptyDir: {}
      - name: tmp-cert-volume
        emptyDir: {}
      - name: tmp-cache-volume
        emptyDir: {}
      - name: tmp-transcodes-volume
        emptyDir: {}
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
  volumeClaimTemplates:
  - metadata:
      name: jellyfin-pv-claim
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ kubernetes_glusterfs_storage_class_name }}
      resources:
        requests:
          storage: {{ jellyfin.container.storage.data }}
      selector:
        matchLabels:
          {{ jellyfin.labels_def | to_nice_yaml() | indent(10) }}
