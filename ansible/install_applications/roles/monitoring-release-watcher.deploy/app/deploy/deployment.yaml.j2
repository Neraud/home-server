apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-watcher
  namespace: {{ release_watcher.namespace }}
  labels:
    {{ release_watcher.labels_def | to_nice_yaml() | indent(4) }}
    {{ release_watcher.labels_desc | to_nice_yaml() | indent(4) }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  selector:
    matchLabels:
      {{ release_watcher.labels_def | to_nice_yaml() | indent(6) }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{ release_watcher.labels_def | to_nice_yaml() | indent(8) }}
        {{ release_watcher.labels_desc | to_nice_yaml() | indent(8) }}
    spec:
      containers:
      - name: release-watcher
        image: "{{ release_watcher.container.image }}"
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: metrics
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000 # random UID
          readOnlyRootFilesystem: true
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /
            port: metrics
          initialDelaySeconds: 3
          periodSeconds: 5
        resources:
          requests:
            cpu: "{{ release_watcher.container.requests_cpu }}"
            memory: "{{ release_watcher.container.requests_memory }}"
          limits:
            cpu: "{{ release_watcher.container.limits_cpu }}"
            memory: "{{ release_watcher.container.limits_memory }}"
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
          readOnly: true
        - name: release-watcher-config
          mountPath: /data/config.yaml
          subPath: config.yaml
        - name: release-watcher-config
          mountPath: /data/watchers.yaml
          subPath: watchers.yaml
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: release-watcher-config
        configMap:
          name: release-watcher-config
      imagePullSecrets:
      - name: docker-config
      nodeSelector:
        capability/general-purpose: 'yes'
