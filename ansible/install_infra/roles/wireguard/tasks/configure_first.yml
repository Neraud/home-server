---
- name: Creates Wireguard keys dir
  ansible.builtin.file:
    path: "{{ wireguard.server.keys_dir }}"
    state: directory

- name: Generate Wireguard server private key
  ansible.builtin.shell: wg genkey > private.key
  args:
    chdir: "{{ wireguard.server.keys_dir }}"
    creates: private.key

- name: Set Wireguard server private key permissions
  ansible.builtin.file:
    path: "{{ wireguard.server.keys_dir }}/private.key"
    mode: 0600

- name: Generate Wireguard server public key
  ansible.builtin.shell: wg pubkey < private.key > public.key
  args:
    chdir: "{{ wireguard.server.keys_dir }}"
    creates: public.key

- name: List existing client directories
  ansible.builtin.find:
    paths: "{{ wireguard.server.clients_dir }}"
    file_type: directory
    recurse: no
  register: existing_client_dirs

- name: Delete obsolete client directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ existing_client_dirs.files }}"
  loop_control:
    label: "{{ item.path | basename }}"
  when: (item.path | basename) not in wireguard.clients

- name: Generate Wireguard client directories
  ansible.builtin.file:
    path: "{{ wireguard.server.clients_dir }}/{{ item.key }}"
    state: directory
    mode: 0700
  loop: "{{ wireguard.clients | dict2items }}"

- name: Generate Wireguard clients private keys
  ansible.builtin.shell: wg genkey > private.key
  args:
    chdir: "{{ wireguard.server.clients_dir }}/{{ item.key }}"
    creates: "private.key"
  loop: "{{ wireguard.clients | dict2items }}"

- name: Generate Wireguard clients public keys
  ansible.builtin.shell: wg pubkey < private.key > public.key
  args:
    chdir: "{{ wireguard.server.clients_dir }}/{{ item.key }}"
    creates: "public.key"
  loop: "{{ wireguard.clients | dict2items }}"

- name: Read generated Wireguard server private key
  ansible.builtin.slurp:
    src: "{{ wireguard.server.keys_dir }}/private.key"
  register: wireguard_generated_server_private_key

- name: Read generated Wireguard server public key
  ansible.builtin.slurp:
    src: "{{ wireguard.server.keys_dir }}/public.key"
  register: wireguard_generated_server_public_key

- name: Read generated Wireguard clients private keys
  ansible.builtin.slurp:
    src: "{{ wireguard.server.clients_dir }}/{{ item.key }}/private.key"
  loop: "{{ wireguard.clients | dict2items }}"
  register: wireguard_generated_clients_private_keys

- name: Read generated Wireguard clients public keys
  ansible.builtin.slurp:
    src: "{{ wireguard.server.clients_dir }}/{{ item.key }}/public.key"
  loop: "{{ wireguard.clients | dict2items }}"
  register: wireguard_generated_clients_public_keys

- name: Prepare Wireguard client configurations
  ansible.builtin.set_fact:
    wireguard_generated_clients: "{{ (wireguard_generated_clients | default([])) + [ wireguard_generated_client ] }}"
  loop: "{{ (wireguard.clients | dict2items) | zip(wireguard_generated_clients_private_keys.results, wireguard_generated_clients_public_keys.results) }}"
  vars:
    wireguard_generated_client:
      name: "{{ item.0.key }}"
      config: "{{ item.0.value }}"
      private_key: "{{ item.1.content | b64decode }}"
      public_key: "{{ item.2.content | b64decode }}"

- name: Generate Wireguard client configurations
  ansible.builtin.template:
    src: client.conf.j2
    dest: "{{ wireguard.server.clients_dir }}/{{ item.name }}/client.conf"
    owner: root
    group: root
    mode: 0600
  loop: "{{ wireguard_generated_clients | default([]) }}"
  vars:
    wireguard_server_private_key: "{{ wireguard_generated_server_private_key.content | b64decode }}"
    wireguard_server_public_key: "{{ wireguard_generated_server_public_key.content | b64decode }}"

- name: Configure Wireguard
  ansible.builtin.template:
    src: interface.conf.j2
    dest: "/etc/wireguard/{{ wireguard.server.interface }}.conf"
    owner: root
    group: root
    mode: 0600
  vars:
    wireguard_server_private_key: "{{ wireguard_generated_server_private_key.content | b64decode }}"
    wireguard_server_public_key: "{{ wireguard_generated_server_public_key.content | b64decode }}"
  notify: Restart Wireguard

- name: Create generation dir on controller
  ansible.builtin.file:
    path: "{{ wireguard.generation_dir }}"
    state: directory
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: yes

- name: Fetch generated configurations
  ansible.posix.synchronize:
    src: "{{ wireguard.config_dir }}/"
    dest: "{{ wireguard.generation_dir }}/"
    recursive: yes
    delete: yes
    mode: pull
  delegate_to: "{{ groups['controller'][0] }}"
  run_once: yes
