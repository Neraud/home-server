---

- name: Install Certbot
  apt:
    pkg: certbot
    state: present
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert is defined and item.https_cert.mode == "letsencrypt"

- name: Generate deploy cert script
  template:
    dest: "{{ nginx_ssl_letsencrypt_deploy_certs_script }}"
    src: deploy_letsencrypt_certs.sh.j2
    mode: 0755
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert is defined and item.https_cert.mode == "letsencrypt"

- name: Ensures the webroot folders exist
  file:
    path: "{{ item.https_cert.docroot }}"
    state: directory
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert is defined and item.https_cert.mode == "letsencrypt"

- name: Look for existing letsencrypt certificates
  stat:
    path: "/etc/letsencrypt/live/{{ item.server_name }}"
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  register: existing_letsencrypt_certificates

- name: Generate bootstrap sites for new letsencrypt sites
  template:
    src: sites_bootstrap_for_letsencrypt.j2
    dest: "/etc/nginx/sites-available/{{ item.0.name }}"
    backup: yes
  loop: "{{ nginx_sites | zip(existing_letsencrypt_certificates.results) | list }}"
  loop_control:
    label: "{{ item.0.name }}"
  when: item.0.https_cert is defined and item.0.https_cert.mode == "letsencrypt" and not item.1.stat.exists
  register: generate_bootstrap_sites

- name: Enable bootstrap sites for new letsencrypt sites
  file:
    src: /etc/nginx/sites-available/{{ item.0.name }}
    dest: /etc/nginx/sites-enabled/{{ item.0.enabled_name }}
    state: link
  loop: "{{ nginx_sites | zip(existing_letsencrypt_certificates.results) | list }}"
  loop_control:
    label: "{{ item.0.name }}"
  when: item.0.https_cert is defined and item.0.https_cert.mode == "letsencrypt" and not item.1.stat.exists

- name: Force nginx restart to load bootstrap sites
  service:
    name: nginx
    state: restarted
  when: generate_bootstrap_sites.changed
  tags:
    # We force an nginx restart here to allow certbot to work, we can't use a handler
    # so suppress the ansible-lint warning
    - skip_ansible_lint

- name: Create staging letsencrypt certificate
  command: certbot certonly -n --webroot -w {{ item.https_cert.docroot }} -m {{ item.https_cert.email }} --staging --agree-tos -d {{ item.server_name }} --deploy-hook "{{ nginx_ssl_letsencrypt_deploy_certs_script }}"
  args:
    creates: /etc/letsencrypt/live/{{ item.server_name }}
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert is defined and item.https_cert.mode == "letsencrypt" and not item.https_cert.live | default(False)

- name: Create live letsencrypt certificate
  command: certbot certonly -n --webroot -w {{ item.https_cert.docroot }} -m {{ item.https_cert.email }} --agree-tos -d {{ item.server_name }} --deploy-hook "{{ nginx_ssl_letsencrypt_deploy_certs_script }}"
  args:
    creates: /etc/letsencrypt/live/{{ item.server_name }}
  loop: "{{ nginx_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert is defined and item.https_cert.mode == "letsencrypt" and item.https_cert.live | default(False)

- name: Create renew job
  cron:
    name: "Renew letsencrypt certs"
    cron_file: letsencrypt_renew
    user: root
    special_time: daily
    job: "certbot renew"
