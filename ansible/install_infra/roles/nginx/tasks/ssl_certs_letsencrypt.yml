---

- name: Install Certbot
  apt:
    pkg: certbot
    state: present

- name: Ensures letsencrypt folder exist
  file:
    path: "{{ nginx_letsencrypt_dir }}"
    state: directory

- name: Generate hook scripts
  template:
    dest: "{{ nginx_letsencrypt_dir }}/{{ item }}"
    src: "letsencrypt/{{ item }}.j2"
    mode: 0755
  loop:
     - pre_hook.sh
     - post_hook.sh

- name: Generate NGinx bootstrap configuration
  template:
    dest: "{{ nginx_letsencrypt_dir }}/nginx.conf"
    src: "letsencrypt/nginx.conf.j2"

- name: Ensures the webroot folders exist
  file:
    path: "{{ nginx_letsencrypt_docroot }}/{{ item.server_name | default('_') }}"
    state: directory
  loop: "{{ nginx_letsencrypt_sites }}"

- name: Create staging letsencrypt certificate
  command: >
    certbot certonly -n
    --webroot -w {{ nginx_letsencrypt_docroot }}/{{ item.server_name | default('_') }}
    -m {{ item.https_cert.email }}
    --staging
    --agree-tos
    -d {{ item.server_name }}
    --pre-hook "{{ nginx_letsencrypt_dir }}/pre_hook.sh"
    --post-hook "{{ nginx_letsencrypt_dir }}/post_hook.sh"
  args:
    creates: /etc/letsencrypt/live/{{ item.server_name }}
  loop: "{{ nginx_letsencrypt_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: not (item.https_cert.live | default(False))

- name: Create live letsencrypt certificate
  command: >
    certbot certonly -n
    --webroot -w {{ nginx_letsencrypt_docroot }}/{{ item.server_name | default('_') }}
    -m {{ item.https_cert.email }}
    --agree-tos
    -d {{ item.server_name }}
    --pre-hook "{{ nginx_letsencrypt_dir }}/pre_hook.sh"
    --post-hook "{{ nginx_letsencrypt_dir }}/post_hook.sh"
  args:
    creates: /etc/letsencrypt/live/{{ item.server_name }}
  loop: "{{ nginx_letsencrypt_sites }}"
  loop_control:
    label: "{{ item.name }}"
  when: item.https_cert.live | default(False)

- name: Create renew job
  cron:
    name: "Renew letsencrypt certs"
    cron_file: letsencrypt_renew
    user: root
    special_time: daily
    job: "certbot renew"
