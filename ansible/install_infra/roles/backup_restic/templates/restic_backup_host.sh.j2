#!/usr/bin/env bash

# {{ ansible_managed }}

set -uo pipefail
BACKUP_SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

{% if not restic_host_backup_repository.enabled %}echo "Host backup disabled" && exit 0{% endif %}

export RESTIC_REPOSITORY="{{ restic_host_backup_repository.repository }}"
export RESTIC_PASSWORD="{{ restic_host_backup_repository.password }}"
source ${BACKUP_SCRIPTS_DIR}/_restic.sh
source ${BACKUP_SCRIPTS_DIR}/_prometheus.sh
PROMETHEUS_OUTPUT_FILE="${PROMETHEUS_OUTPUT_DIR}/backup_restic_host.prom"
PROMETHEUS_OUTPUT_FILE_TMP=${PROMETHEUS_OUTPUT_FILE}.new
PROMETHEUS_LABEL_HOST=$(hostname)
PROMETHEUS_LABEL_TYPE="restic"
PROMETHEUS_LABEL_REPO="{{ restic_host_backup_repository.name }}"
PROMETHEUS_COMMON_LABELS="host=\"${PROMETHEUS_LABEL_HOST}\",type=\"${PROMETHEUS_LABEL_TYPE}\",repo=\"${PROMETHEUS_LABEL_REPO}\""

job_start=$(date +%s)
job_status=0


function backup_path() {
    path="$1"
    params="$2"
    echo "===================================================================================================="
    echo " - ${path} (${params})"
    
    task_start=$(date +%s)
    task_status=0
    task_common_labels="path=\"${path}\""
    tmp_output=$(mktemp)
    
    {{ restic_bin_path }} backup ${path} ${params} --json > ${tmp_output}
    task_status=$?
    task_end=$(date +%s)
    task_duration=$((task_end-task_start))
    
    if [ ${task_status} -ne 0 ] ; then
        job_status=1
    fi

    echo "Finished with status ${task_status}"
    cat ${tmp_output} | jq -r '. | select(.message_type == "summary")'
    add_prom_metric "backup_task_start" "${task_common_labels}" ${task_start}
    add_prom_metric "backup_task_duration" "${task_common_labels}" ${task_duration}
    add_prom_metric "backup_task_status" "${task_common_labels}" ${task_status}
    
    if [ ${task_status} -eq 0 ] ; then
        bytes_added=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .data_added')
        bytes_total=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .total_bytes_processed')
        files_new=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_new')
        files_modified=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_changed')
        files_unchanged=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .files_unmodified')
        dirs_new=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_new')
        dirs_modified=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_changed')
        dirs_unchanged=$(cat ${tmp_output} | jq -r '. | select(.message_type == "summary") | .dirs_unmodified')

        add_prom_metric "backup_task_added_bytes" "${task_common_labels}" ${bytes_added}
        add_prom_metric "backup_task_total_bytes" "${task_common_labels}" ${bytes_total}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"new\"" ${files_new}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"modified\"" ${files_modified}
        add_prom_metric "backup_task_files" "${task_common_labels},state=\"unchanged\"" ${files_unchanged}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"new\"" ${dirs_new}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"modified\"" ${dirs_modified}
        add_prom_metric "backup_task_dirs" "${task_common_labels},state=\"unchanged\"" ${dirs_unchanged}
    fi

    rm ${tmp_output}
}

init_backup_prom_file

init_repo_if_necessary

echo ""
echo "Backing up paths"
{% for p in restic_host_backup_repository.paths %}
{% set params = [] %}
{% for e in p.excludes | default([]) %}{{ params.append("--exclude " ~ e) }}{% endfor %}
backup_path {{ p.path }} "{{ ' '.join(params) }}"
{% endfor %}

job_end=$(date +%s)
job_duration=$((job_end-job_start))

add_prom_metric "backup_job_start" "" ${job_start}
add_prom_metric "backup_job_duration" "" ${job_duration}
add_prom_metric "backup_job_status" "" ${job_status}

finish_prom_file

exit ${job_status}
