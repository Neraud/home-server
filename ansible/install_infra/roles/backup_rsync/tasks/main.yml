---
- name: Ensure rsync backup scripts directory exists
  ansible.builtin.file:
    path: "{{ rsync_backup_scripts_dir }}"
    state: directory
    mode: 0700

- name: Search for existing rsync backup scripts
  ansible.builtin.find:
    paths: "{{ rsync_backup_scripts_dir }}"
    patterns: "rsync_backup_to_*.sh"
  register: existing_rsync_scripts

- name: Deploy rsync backup scripts
  ansible.builtin.template:
    src: "rsync_backup.sh.j2"
    dest: "{{ rsync_backup_scripts_dir }}/rsync_backup_to_{{ item.repo_name }}.sh"
    mode: 0700
  loop: "{{ rsync_backups }}"
  loop_control:
    label: "{{ item.repo_name }}"

- name: List rsync backup scripts to remove
  ansible.builtin.set_fact:
    existing_rsync_scripts_to_remove: "{{ existing_rsync_scripts_to_remove | default([]) + [ item.path ] }}"
  loop: "{{ existing_rsync_scripts.files }}"
  loop_control:
    label: "{{ item.path | basename | regex_replace('^rsync_backup_to_(.*).sh', '\\1') }}"
  when: (item.path | basename | regex_replace('^rsync_backup_to_(.*).sh', '\\1')) not in (rsync_backups | map(attribute='repo_name') | list)

- name: Remove rsync backup scripts to remove
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ existing_rsync_scripts_to_remove | default([]) }}"
