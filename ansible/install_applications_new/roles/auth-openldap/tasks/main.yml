---

- name: Build and deploy auth-openldap
  ansible.builtin.import_tasks: ../../app_base/tasks/build-and-deploy.yml
  vars:
    app_name: auth-openldap

- name: Deploy OpenLDAP backup script
  ansible.builtin.import_tasks: ../../app_base/tasks/backup.yml
  vars:
    app_backup:
      name: auth-openldap
      repository: "{{ restic_apps_backup_repository }}"
      namespace: auth-openldap
      apps_to_stop:
        - name: openldap
          type: statefulset
          replicas: 1
      longhorn_volumes:
        - volume_name: openldap-data
          pvc_name: openldap-data-pv-claim-openldap-0
  tags: backup

- name: Wait for OpenLDAP to be available
  kubernetes.core.k8s_info:
    kind: StatefulSet
    namespace: auth-openldap
    name: openldap
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubeconfig_context }}"
  register: k8s_result
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 30
  delay: 5

# On first start, OpenLdap restarts to run its setup process
# So if the first wait task has waited, we make sure it's really still up a few seconds later
- name: Wait a bit ...
  ansible.builtin.pause:
    seconds: 10
  when: k8s_result.attempts > 1

- name: Wait for OpenLDAP to be available
  kubernetes.core.k8s_info:
    kind: StatefulSet
    namespace: auth-openldap
    name: openldap
    kubeconfig: "{{ kubeconfig_path }}"
    context: "{{ kubeconfig_context }}"
  register: k8s_result
  until: k8s_result.resources[0].status.readyReplicas | default(0) > 0
  retries: 30
  delay: 5
  when: k8s_result.attempts > 1

- name: Create LDAP base OUs
  community.general.ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "{{ item }}"
    objectClass: organizationalUnit
    state: present
  with_items:
    - "{{ openldap_ldap_structure_users_ou_dn }}"
    - "{{ openldap_ldap_structure_groups_ou_dns | dict2items | map(attribute='value') | list }}"

- name: Create LDAP users
  community.general.ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_users_ou_dn }}"
    objectClass: inetOrgPerson
    state: present
    attributes:
      sn: "{{ item.sn }}"
  with_items: "{{ openldap_ldap_users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP users attributes
  community.general.ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_users_ou_dn }}"
    attributes:
      displayName: "{{ item.displayName }}"
      uid: "{{ item.id }}"
      mail: "{{ item.email }}"
    state: exact
  loop: "{{ openldap_ldap_users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP users password
  community.general.ldap_passwd:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_users_ou_dn }}"
    passwd: "{{ item.password }}"
  with_items: "{{ openldap_ldap_users | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Create LDAP groups
  community.general.ldap_entry:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_groups_ou_dns[item.ou] }}"
    objectClass: GroupOfUniqueNames
    state: present
    attributes:
      uniqueMember: ""
  with_items: "{{ openldap_ldap_groups | default([]) }}"

- name: Set LDAP groups attributes
  community.general.ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_groups_ou_dns[item.ou] }}"
    attributes:
      description: "{{ item.description }}"
    state: exact
  loop: "{{ openldap_ldap_groups | default([]) }}"
  loop_control:
    label: "{{ item.id }}"

- name: Set LDAP groups members
  community.general.ldap_attrs:
    server_uri: "ldaps://{{ kubernetes_openldap_lb_ip }}"
    bind_dn: "{{ openldap_ldap_admin_dn }}"
    bind_pw: "{{ openldap_ldap_admin_password }}"
    validate_certs: no
    dn: "cn={{ item.id }},{{ openldap_ldap_structure_groups_ou_dns[item.ou] }}"
    attributes:
      uniqueMember: "{{ item.members | map('regex_replace', '^(.*)$', 'cn=\\1,' + openldap_ldap_structure_users_ou_dn) | list }}"
    state: exact
  loop: "{{ openldap_ldap_groups | default([]) }}"
  when: item.members | default([]) | length > 0
  loop_control:
    label: "{{ item.id }} : {{ item.members | default([]) }}"
